//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Grammars\TeuchiUdonParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace akanevrc.TeuchiUdon {

    #pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class TeuchiUdonParser : TeuchiUdonBaseParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_COMMENT=2, DELIMITED_COMMENT=3, NEWLINE=4, 
		WS=5, TAB=6, AS=7, BREAK=8, CASE=9, CAST=10, CONTINUE=11, DATA=12, DO=13, 
		ELIF=14, ELSE=15, FOR=16, HIDING=17, IMPORT=18, IF=19, IN=20, IS=21, LET=22, 
		LOOP=23, MODULE=24, MUT=25, NEWTYPE=26, OF=27, REF=28, RETURN=29, THEN=30, 
		TYPEOF=31, WHILE=32, YIELD=33, PUBLIC=34, SYNC=35, LINEAR=36, SMOOTH=37, 
		NULL_LITERAL=38, BOOL_LITERAL=39, THIS_LITERAL=40, IDENTIFIER=41, INTEGER_LITERAL=42, 
		HEX_INTEGER_LITERAL=43, BIN_INTEGER_LITERAL=44, REAL_LITERAL=45, CHARACTER_LITERAL=46, 
		REGULAR_STRING=47, VERBATIUM_STRING=48, INTERPOLATED_REGULAR_STRING_START=49, 
		OPEN_BRACE=50, CLOSE_BRACE=51, OPEN_PAREN=52, CLOSE_PAREN=53, OPEN_BRACKET=54, 
		CLOSE_BRACKET=55, OPEN_ARRAY=56, CLOSE_ARRAY=57, DOT=58, COMMA=59, COLON=60, 
		SEMICOLON=61, PLUS=62, MINUS=63, STAR=64, DIV=65, PERCENT=66, AMP=67, 
		PIPE=68, CARET=69, BANG=70, TILDE=71, BIND=72, LT=73, GT=74, WILDCARD=75, 
		INTERR=76, OP_COALESCING=77, OP_COALESCING_ACCESS=78, OP_AND=79, OP_OR=80, 
		OP_ARROW=81, OP_EQ=82, OP_NE=83, OP_LE=84, OP_GE=85, OP_ASSIGNMENT=86, 
		OP_LEFT_SHIFT=87, OP_RIGHT_SHIFT=88, OP_LEFT_PIPELINE=89, OP_RIGHT_PIPELINE=90, 
		OP_RANGE=91, OP_SPREAD=92, OPEN_BRACE_INSIDE=93, DOUBLE_QUOTE_INSIDE=94, 
		REGULAR_STRING_INSIDE=95;
	public const int
		RULE_target = 0, RULE_body = 1, RULE_topStatement = 2, RULE_varAttr = 3, 
		RULE_varBind = 4, RULE_varDecl = 5, RULE_qualifiedVar = 6, RULE_identifier = 7, 
		RULE_statement = 8, RULE_expr = 9, RULE_iterExpr = 10, RULE_argExpr = 11, 
		RULE_forBind = 12, RULE_forIterExpr = 13, RULE_isoExpr = 14, RULE_literal = 15, 
		RULE_thisLiteral = 16, RULE_interpolatedRegularString = 17, RULE_interpolatedRegularStringPart = 18;
	public static readonly string[] ruleNames = {
		"target", "body", "topStatement", "varAttr", "varBind", "varDecl", "qualifiedVar", 
		"identifier", "statement", "expr", "iterExpr", "argExpr", "forBind", "forIterExpr", 
		"isoExpr", "literal", "thisLiteral", "interpolatedRegularString", "interpolatedRegularStringPart"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, null, null, "'as'", "'break'", 
		"'case'", "'cast'", "'continue'", "'data'", "'do'", "'elif'", "'else'", 
		"'for'", "'hiding'", "'import'", "'if'", "'in'", "'is'", "'let'", "'loop'", 
		"'module'", "'mut'", "'newtype'", "'of'", "'ref'", "'return'", "'then'", 
		"'typeof'", "'while'", "'yield'", "'@public'", "'@sync'", "'@linear'", 
		"'@smooth'", "'null'", null, "'this'", null, null, null, null, null, null, 
		null, null, null, "'{'", "'}'", "'('", "')'", "'['", "']'", "'[|'", "'|]'", 
		"'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", 
		"'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'_'", "'?'", "'??'", 
		"'?.'", "'&&'", "'||'", "'->'", "'=='", "'!='", "'<='", "'>='", "'<-'", 
		"'<<'", "'>>'", "'<|'", "'|>'", "'..'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "NEWLINE", 
		"WS", "TAB", "AS", "BREAK", "CASE", "CAST", "CONTINUE", "DATA", "DO", 
		"ELIF", "ELSE", "FOR", "HIDING", "IMPORT", "IF", "IN", "IS", "LET", "LOOP", 
		"MODULE", "MUT", "NEWTYPE", "OF", "REF", "RETURN", "THEN", "TYPEOF", "WHILE", 
		"YIELD", "PUBLIC", "SYNC", "LINEAR", "SMOOTH", "NULL_LITERAL", "BOOL_LITERAL", 
		"THIS_LITERAL", "IDENTIFIER", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
		"BIN_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
		"VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", "OPEN_BRACE", 
		"CLOSE_BRACE", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"OPEN_ARRAY", "CLOSE_ARRAY", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", 
		"MINUS", "STAR", "DIV", "PERCENT", "AMP", "PIPE", "CARET", "BANG", "TILDE", 
		"BIND", "LT", "GT", "WILDCARD", "INTERR", "OP_COALESCING", "OP_COALESCING_ACCESS", 
		"OP_AND", "OP_OR", "OP_ARROW", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "OP_ASSIGNMENT", 
		"OP_LEFT_SHIFT", "OP_RIGHT_SHIFT", "OP_LEFT_PIPELINE", "OP_RIGHT_PIPELINE", 
		"OP_RANGE", "OP_SPREAD", "OPEN_BRACE_INSIDE", "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeuchiUdonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TeuchiUdonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TeuchiUdonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TeuchiUdonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TargetContext : ParserRuleContext {
		public TargetResult result;
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TeuchiUdonParser.Eof, 0); }
		public TargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitTarget(this);
		}
	}

	[RuleVersion(0)]
	public TargetContext target() {
		TargetContext _localctx = new TargetContext(Context, State);
		EnterRule(_localctx, 0, RULE_target);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
			case IF:
			case LET:
			case LOOP:
			case MUT:
			case TYPEOF:
			case WHILE:
			case PUBLIC:
			case SYNC:
			case LINEAR:
			case SMOOTH:
			case NULL_LITERAL:
			case BOOL_LITERAL:
			case THIS_LITERAL:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case OPEN_BRACE:
			case OPEN_PAREN:
			case OPEN_BRACKET:
			case OPEN_ARRAY:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				body();
				State = 39;
				Match(Eof);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BodyResult result;
		[System.Diagnostics.DebuggerNonUserCode] public TopStatementContext[] topStatement() {
			return GetRuleContexts<TopStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopStatementContext topStatement(int i) {
			return GetRuleContext<TopStatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 44;
				topStatement();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 16)) & ~0x3f) == 0 && ((1L << (_la - 16)) & ((1L << (FOR - 16)) | (1L << (IF - 16)) | (1L << (LET - 16)) | (1L << (LOOP - 16)) | (1L << (MUT - 16)) | (1L << (TYPEOF - 16)) | (1L << (WHILE - 16)) | (1L << (PUBLIC - 16)) | (1L << (SYNC - 16)) | (1L << (LINEAR - 16)) | (1L << (SMOOTH - 16)) | (1L << (NULL_LITERAL - 16)) | (1L << (BOOL_LITERAL - 16)) | (1L << (THIS_LITERAL - 16)) | (1L << (IDENTIFIER - 16)) | (1L << (INTEGER_LITERAL - 16)) | (1L << (HEX_INTEGER_LITERAL - 16)) | (1L << (BIN_INTEGER_LITERAL - 16)) | (1L << (REAL_LITERAL - 16)) | (1L << (CHARACTER_LITERAL - 16)) | (1L << (REGULAR_STRING - 16)) | (1L << (VERBATIUM_STRING - 16)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 16)) | (1L << (OPEN_BRACE - 16)) | (1L << (OPEN_PAREN - 16)) | (1L << (OPEN_BRACKET - 16)) | (1L << (OPEN_ARRAY - 16)) | (1L << (PLUS - 16)) | (1L << (MINUS - 16)) | (1L << (BANG - 16)) | (1L << (TILDE - 16)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopStatementContext : ParserRuleContext {
		public TopStatementResult result;
		public TopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topStatement; } }
	 
		public TopStatementContext() { }
		public virtual void CopyFrom(TopStatementContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class VarBindTopStatementContext : TopStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TeuchiUdonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarAttrContext[] varAttr() {
			return GetRuleContexts<VarAttrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarAttrContext varAttr(int i) {
			return GetRuleContext<VarAttrContext>(i);
		}
		public VarBindTopStatementContext(TopStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVarBindTopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVarBindTopStatement(this);
		}
	}
	public partial class ExprTopStatementContext : TopStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TeuchiUdonParser.SEMICOLON, 0); }
		public ExprTopStatementContext(TopStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterExprTopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitExprTopStatement(this);
		}
	}

	[RuleVersion(0)]
	public TopStatementContext topStatement() {
		TopStatementContext _localctx = new TopStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_topStatement);
		int _la;
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new VarBindTopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << SYNC) | (1L << LINEAR) | (1L << SMOOTH))) != 0)) {
					{
					{
					State = 49;
					varAttr();
					}
					}
					State = 54;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 55;
				varBind();
				State = 56;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ExprTopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				expr(0);
				State = 59;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAttrContext : ParserRuleContext {
		public VarAttrResult result;
		public VarAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAttr; } }
	 
		public VarAttrContext() { }
		public virtual void CopyFrom(VarAttrContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class SyncVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(TeuchiUdonParser.SYNC, 0); }
		public SyncVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSyncVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSyncVarAttr(this);
		}
	}
	public partial class SmoothVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMOOTH() { return GetToken(TeuchiUdonParser.SMOOTH, 0); }
		public SmoothVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSmoothVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSmoothVarAttr(this);
		}
	}
	public partial class PublicVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(TeuchiUdonParser.PUBLIC, 0); }
		public PublicVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterPublicVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitPublicVarAttr(this);
		}
	}
	public partial class LinearVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(TeuchiUdonParser.LINEAR, 0); }
		public LinearVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLinearVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLinearVarAttr(this);
		}
	}

	[RuleVersion(0)]
	public VarAttrContext varAttr() {
		VarAttrContext _localctx = new VarAttrContext(Context, State);
		EnterRule(_localctx, 6, RULE_varAttr);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PUBLIC:
				_localctx = new PublicVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 63;
				Match(PUBLIC);
				}
				break;
			case SYNC:
				_localctx = new SyncVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				Match(SYNC);
				}
				break;
			case LINEAR:
				_localctx = new LinearVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 65;
				Match(LINEAR);
				}
				break;
			case SMOOTH:
				_localctx = new SmoothVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 66;
				Match(SMOOTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarBindContext : ParserRuleContext {
		public VarBindResult result;
		public int tableIndex;
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIND() { return GetToken(TeuchiUdonParser.BIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarBindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varBind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVarBind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVarBind(this);
		}
	}

	[RuleVersion(0)]
	public VarBindContext varBind() {
		VarBindContext _localctx = new VarBindContext(Context, State);
		EnterRule(_localctx, 8, RULE_varBind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			varDecl(true);
			State = 70;
			Match(BIND);
			State = 71;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public bool isActual;
		public VarDeclResult result;
		public VarDeclContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public VarDeclContext(ParserRuleContext parent, int invokingState, bool isActual)
			: base(parent, invokingState)
		{
			this.isActual = isActual;
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
			this.isActual = context.isActual;
			this.result = context.result;
		}
	}
	public partial class UnitVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public UnitVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterUnitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitUnitVarDecl(this);
		}
	}
	public partial class TupleVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedVarContext[] qualifiedVar() {
			return GetRuleContexts<QualifiedVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedVarContext qualifiedVar(int i) {
			return GetRuleContext<QualifiedVarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public TupleVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterTupleVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitTupleVarDecl(this);
		}
	}
	public partial class SingleVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedVarContext qualifiedVar() {
			return GetRuleContext<QualifiedVarContext>(0);
		}
		public SingleVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSingleVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSingleVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl(bool isActual) {
		VarDeclContext _localctx = new VarDeclContext(Context, State, isActual);
		EnterRule(_localctx, 10, RULE_varDecl);
		int _la;
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new UnitVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 73;
				Match(OPEN_PAREN);
				State = 74;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				_localctx = new SingleVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				qualifiedVar();
				}
				break;
			case 3:
				_localctx = new TupleVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 76;
				Match(OPEN_PAREN);
				State = 77;
				qualifiedVar();
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 78;
					Match(COMMA);
					State = 79;
					qualifiedVar();
					}
					}
					State = 84;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 85;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedVarContext : ParserRuleContext {
		public QualifiedVarResult result;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUT() { return GetToken(TeuchiUdonParser.MUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TeuchiUdonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public QualifiedVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterQualifiedVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitQualifiedVar(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedVarContext qualifiedVar() {
		QualifiedVarContext _localctx = new QualifiedVarContext(Context, State);
		EnterRule(_localctx, 12, RULE_qualifiedVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUT) {
				{
				State = 89;
				Match(MUT);
				}
			}

			State = 92;
			identifier();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 93;
				Match(COLON);
				State = 94;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierResult result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TeuchiUdonParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementResult result;
		public int tableIndex;
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
			this.result = context.result;
			this.tableIndex = context.tableIndex;
		}
	}
	public partial class ReturnUnitStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TeuchiUdonParser.RETURN, 0); }
		public ReturnUnitStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterReturnUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitReturnUnitStatement(this);
		}
	}
	public partial class ReturnValueStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TeuchiUdonParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnValueStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterReturnValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitReturnValueStatement(this);
		}
	}
	public partial class BreakUnitStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TeuchiUdonParser.BREAK, 0); }
		public BreakUnitStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBreakUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBreakUnitStatement(this);
		}
	}
	public partial class ContinueValueStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TeuchiUdonParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ContinueValueStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterContinueValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitContinueValueStatement(this);
		}
	}
	public partial class LetBindStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(TeuchiUdonParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		public LetBindStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLetBindStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLetBindStatement(this);
		}
	}
	public partial class ExprStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterExprStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitExprStatement(this);
		}
	}
	public partial class BreakValueStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TeuchiUdonParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BreakValueStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBreakValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBreakValueStatement(this);
		}
	}
	public partial class ContinueUnitStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TeuchiUdonParser.CONTINUE, 0); }
		public ContinueUnitStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterContinueUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitContinueUnitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new ReturnUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 99;
				Match(RETURN);
				}
				break;
			case 2:
				_localctx = new ReturnValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				Match(RETURN);
				State = 101;
				expr(0);
				}
				break;
			case 3:
				_localctx = new ContinueUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				Match(CONTINUE);
				}
				break;
			case 4:
				_localctx = new ContinueValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				Match(CONTINUE);
				State = 104;
				expr(0);
				}
				break;
			case 5:
				_localctx = new BreakUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 105;
				Match(BREAK);
				}
				break;
			case 6:
				_localctx = new BreakValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 106;
				Match(BREAK);
				State = 107;
				expr(0);
				}
				break;
			case 7:
				_localctx = new LetBindStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 108;
				Match(LET);
				State = 109;
				varBind();
				}
				break;
			case 8:
				_localctx = new ExprStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 110;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprResult result;
		public int tableIndex;
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
			this.result = context.result;
			this.tableIndex = context.tableIndex;
		}
	}
	public partial class InterpolatedRegularStringExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterpolatedRegularStringContext interpolatedRegularString() {
			return GetRuleContext<InterpolatedRegularStringContext>(0);
		}
		public InterpolatedRegularStringExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterInterpolatedRegularStringExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitInterpolatedRegularStringExpr(this);
		}
	}
	public partial class WhileExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(TeuchiUdonParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsoExprContext isoExpr() {
			return GetRuleContext<IsoExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(TeuchiUdonParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhileExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterWhileExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitWhileExpr(this);
		}
	}
	public partial class IfExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TeuchiUdonParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsoExprContext isoExpr() {
			return GetRuleContext<IsoExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(TeuchiUdonParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIfExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIfExpr(this);
		}
	}
	public partial class IfElifExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TeuchiUdonParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsoExprContext[] isoExpr() {
			return GetRuleContexts<IsoExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsoExprContext isoExpr(int i) {
			return GetRuleContext<IsoExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(TeuchiUdonParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(TeuchiUdonParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(TeuchiUdonParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(TeuchiUdonParser.ELIF, i);
		}
		public IfElifExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIfElifExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIfElifExpr(this);
		}
	}
	public partial class ThisLiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ThisLiteralContext thisLiteral() {
			return GetRuleContext<ThisLiteralContext>(0);
		}
		public ThisLiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterThisLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitThisLiteralExpr(this);
		}
	}
	public partial class UnitBlockExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(TeuchiUdonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(TeuchiUdonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(TeuchiUdonParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(TeuchiUdonParser.SEMICOLON, i);
		}
		public UnitBlockExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterUnitBlockExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitUnitBlockExpr(this);
		}
	}
	public partial class LogicalAndExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(TeuchiUdonParser.AMP, 0); }
		public LogicalAndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpr(this);
		}
	}
	public partial class AssignExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_ASSIGNMENT, 0); }
		public AssignExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
	}
	public partial class EvalVarExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EvalVarExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalVarExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalVarExpr(this);
		}
	}
	public partial class RightPipelineExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHT_PIPELINE() { return GetToken(TeuchiUdonParser.OP_RIGHT_PIPELINE, 0); }
		public RightPipelineExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRightPipelineExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRightPipelineExpr(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(TeuchiUdonParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(TeuchiUdonParser.OP_NE, 0); }
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
	}
	public partial class ValueBlockExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(TeuchiUdonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(TeuchiUdonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(TeuchiUdonParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(TeuchiUdonParser.SEMICOLON, i);
		}
		public ValueBlockExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterValueBlockExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitValueBlockExpr(this);
		}
	}
	public partial class CastExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TeuchiUdonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(TeuchiUdonParser.CAST, 0); }
		public CastExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterCastExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitCastExpr(this);
		}
	}
	public partial class EmptyListCtorExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(TeuchiUdonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(TeuchiUdonParser.CLOSE_BRACKET, 0); }
		public EmptyListCtorExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEmptyListCtorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEmptyListCtorExpr(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
	}
	public partial class ListCtorExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(TeuchiUdonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IterExprContext[] iterExpr() {
			return GetRuleContexts<IterExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterExprContext iterExpr(int i) {
			return GetRuleContext<IterExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(TeuchiUdonParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public ListCtorExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterListCtorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitListCtorExpr(this);
		}
	}
	public partial class EmptyArrayCtorExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_ARRAY() { return GetToken(TeuchiUdonParser.OPEN_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_ARRAY() { return GetToken(TeuchiUdonParser.CLOSE_ARRAY, 0); }
		public EmptyArrayCtorExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEmptyArrayCtorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEmptyArrayCtorExpr(this);
		}
	}
	public partial class MultiplicationExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(TeuchiUdonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(TeuchiUdonParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(TeuchiUdonParser.PERCENT, 0); }
		public MultiplicationExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpr(this);
		}
	}
	public partial class ShiftExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT() { return GetToken(TeuchiUdonParser.OP_LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHT_SHIFT() { return GetToken(TeuchiUdonParser.OP_RIGHT_SHIFT, 0); }
		public ShiftExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
	}
	public partial class IfElseExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TeuchiUdonParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsoExprContext[] isoExpr() {
			return GetRuleContexts<IsoExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsoExprContext isoExpr(int i) {
			return GetRuleContext<IsoExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(TeuchiUdonParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TeuchiUdonParser.ELSE, 0); }
		public IfElseExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIfElseExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIfElseExpr(this);
		}
	}
	public partial class EvalSingleFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgExprContext argExpr() {
			return GetRuleContext<ArgExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public EvalSingleFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalSingleFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalSingleFuncExpr(this);
		}
	}
	public partial class LeftPipelineExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_PIPELINE() { return GetToken(TeuchiUdonParser.OP_LEFT_PIPELINE, 0); }
		public LeftPipelineExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLeftPipelineExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLeftPipelineExpr(this);
		}
	}
	public partial class EvalSingleKeyExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(TeuchiUdonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(TeuchiUdonParser.CLOSE_BRACKET, 0); }
		public EvalSingleKeyExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalSingleKeyExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalSingleKeyExpr(this);
		}
	}
	public partial class AccessExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TeuchiUdonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING_ACCESS() { return GetToken(TeuchiUdonParser.OP_COALESCING_ACCESS, 0); }
		public AccessExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterAccessExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitAccessExpr(this);
		}
	}
	public partial class EvalSpreadFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SPREAD() { return GetToken(TeuchiUdonParser.OP_SPREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public EvalSpreadFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalSpreadFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalSpreadFuncExpr(this);
		}
	}
	public partial class EvalUnitFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public EvalUnitFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalUnitFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalUnitFuncExpr(this);
		}
	}
	public partial class EvalTupleFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgExprContext[] argExpr() {
			return GetRuleContexts<ArgExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgExprContext argExpr(int i) {
			return GetRuleContext<ArgExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public EvalTupleFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalTupleFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalTupleFuncExpr(this);
		}
	}
	public partial class RelationExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(TeuchiUdonParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(TeuchiUdonParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(TeuchiUdonParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(TeuchiUdonParser.OP_GE, 0); }
		public RelationExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRelationExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRelationExpr(this);
		}
	}
	public partial class EvalTupleKeyExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(TeuchiUdonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(TeuchiUdonParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public EvalTupleKeyExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalTupleKeyExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalTupleKeyExpr(this);
		}
	}
	public partial class EvalTypeOfExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(TeuchiUdonParser.TYPEOF, 0); }
		public EvalTypeOfExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalTypeOfExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalTypeOfExpr(this);
		}
	}
	public partial class FuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ARROW() { return GetToken(TeuchiUdonParser.OP_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitFuncExpr(this);
		}
	}
	public partial class TupleExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public TupleExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterTupleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitTupleExpr(this);
		}
	}
	public partial class PrefixExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TeuchiUdonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TeuchiUdonParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(TeuchiUdonParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(TeuchiUdonParser.TILDE, 0); }
		public PrefixExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterPrefixExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitPrefixExpr(this);
		}
	}
	public partial class ConditionalOrExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(TeuchiUdonParser.OP_OR, 0); }
		public ConditionalOrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpr(this);
		}
	}
	public partial class LogicalOrExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(TeuchiUdonParser.PIPE, 0); }
		public LogicalOrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpr(this);
		}
	}
	public partial class AdditionExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TeuchiUdonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TeuchiUdonParser.MINUS, 0); }
		public AdditionExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterAdditionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitAdditionExpr(this);
		}
	}
	public partial class ArrayCtorExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_ARRAY() { return GetToken(TeuchiUdonParser.OPEN_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IterExprContext iterExpr() {
			return GetRuleContext<IterExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_ARRAY() { return GetToken(TeuchiUdonParser.CLOSE_ARRAY, 0); }
		public ArrayCtorExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterArrayCtorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitArrayCtorExpr(this);
		}
	}
	public partial class LetInBindExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(TeuchiUdonParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(TeuchiUdonParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LetInBindExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLetInBindExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLetInBindExpr(this);
		}
	}
	public partial class ForExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(TeuchiUdonParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(TeuchiUdonParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(TeuchiUdonParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForBindContext[] forBind() {
			return GetRuleContexts<ForBindContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForBindContext forBind(int i) {
			return GetRuleContext<ForBindContext>(i);
		}
		public ForExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterForExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitForExpr(this);
		}
	}
	public partial class LoopExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(TeuchiUdonParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LoopExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLoopExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLoopExpr(this);
		}
	}
	public partial class ConditionalAndExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(TeuchiUdonParser.OP_AND, 0); }
		public ConditionalAndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpr(this);
		}
	}
	public partial class CoalescingExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING() { return GetToken(TeuchiUdonParser.OP_COALESCING, 0); }
		public CoalescingExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterCoalescingExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitCoalescingExpr(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
	}
	public partial class IfElifElseExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TeuchiUdonParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsoExprContext[] isoExpr() {
			return GetRuleContexts<IsoExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsoExprContext isoExpr(int i) {
			return GetRuleContext<IsoExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(TeuchiUdonParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(TeuchiUdonParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TeuchiUdonParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(TeuchiUdonParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(TeuchiUdonParser.ELIF, i);
		}
		public IfElifElseExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIfElifElseExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIfElifElseExpr(this);
		}
	}
	public partial class LogicalXorExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(TeuchiUdonParser.CARET, 0); }
		public LogicalXorExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				_localctx = new UnitBlockExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 114;
				Match(OPEN_BRACE);
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (BREAK - 8)) | (1L << (CONTINUE - 8)) | (1L << (FOR - 8)) | (1L << (IF - 8)) | (1L << (LET - 8)) | (1L << (LOOP - 8)) | (1L << (MUT - 8)) | (1L << (RETURN - 8)) | (1L << (TYPEOF - 8)) | (1L << (WHILE - 8)) | (1L << (NULL_LITERAL - 8)) | (1L << (BOOL_LITERAL - 8)) | (1L << (THIS_LITERAL - 8)) | (1L << (IDENTIFIER - 8)) | (1L << (INTEGER_LITERAL - 8)) | (1L << (HEX_INTEGER_LITERAL - 8)) | (1L << (BIN_INTEGER_LITERAL - 8)) | (1L << (REAL_LITERAL - 8)) | (1L << (CHARACTER_LITERAL - 8)) | (1L << (REGULAR_STRING - 8)) | (1L << (VERBATIUM_STRING - 8)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 8)) | (1L << (OPEN_BRACE - 8)) | (1L << (OPEN_PAREN - 8)) | (1L << (OPEN_BRACKET - 8)) | (1L << (OPEN_ARRAY - 8)) | (1L << (PLUS - 8)) | (1L << (MINUS - 8)) | (1L << (BANG - 8)) | (1L << (TILDE - 8)))) != 0)) {
					{
					{
					State = 115;
					statement();
					State = 116;
					Match(SEMICOLON);
					}
					}
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 123;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				{
				_localctx = new ValueBlockExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 124;
				Match(OPEN_BRACE);
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 125;
						statement();
						State = 126;
						Match(SEMICOLON);
						}
						} 
					}
					State = 132;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				State = 133;
				expr(0);
				State = 134;
				Match(CLOSE_BRACE);
				}
				break;
			case 3:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 136;
				Match(OPEN_PAREN);
				State = 137;
				expr(0);
				State = 138;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new TupleExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 140;
				Match(OPEN_PAREN);
				State = 141;
				expr(0);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 142;
					Match(COMMA);
					State = 143;
					expr(0);
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 148;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				{
				_localctx = new EmptyArrayCtorExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150;
				Match(OPEN_ARRAY);
				State = 151;
				Match(CLOSE_ARRAY);
				}
				break;
			case 6:
				{
				_localctx = new ArrayCtorExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 152;
				Match(OPEN_ARRAY);
				State = 153;
				iterExpr();
				State = 154;
				Match(CLOSE_ARRAY);
				}
				break;
			case 7:
				{
				_localctx = new EmptyListCtorExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 156;
				Match(OPEN_BRACKET);
				State = 157;
				Match(CLOSE_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new ListCtorExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 158;
				Match(OPEN_BRACKET);
				State = 159;
				iterExpr();
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 160;
					Match(COMMA);
					State = 161;
					iterExpr();
					}
					}
					State = 166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 167;
				Match(CLOSE_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 169;
				literal();
				}
				break;
			case 10:
				{
				_localctx = new ThisLiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 170;
				thisLiteral();
				}
				break;
			case 11:
				{
				_localctx = new InterpolatedRegularStringExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 171;
				interpolatedRegularString();
				}
				break;
			case 12:
				{
				_localctx = new EvalVarExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 172;
				identifier();
				}
				break;
			case 13:
				{
				_localctx = new EvalTypeOfExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 173;
				Match(TYPEOF);
				}
				break;
			case 14:
				{
				_localctx = new PrefixExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 174;
				((PrefixExprContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (PLUS - 62)) | (1L << (MINUS - 62)) | (1L << (BANG - 62)) | (1L << (TILDE - 62)))) != 0)) ) {
					((PrefixExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 175;
				expr(24);
				}
				break;
			case 15:
				{
				_localctx = new LetInBindExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 176;
				Match(LET);
				State = 177;
				varBind();
				State = 178;
				Match(IN);
				State = 179;
				expr(9);
				}
				break;
			case 16:
				{
				_localctx = new IfExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 181;
				Match(IF);
				State = 182;
				isoExpr();
				State = 183;
				Match(THEN);
				State = 184;
				statement();
				}
				break;
			case 17:
				{
				_localctx = new IfElifExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 186;
				Match(IF);
				State = 187;
				isoExpr();
				State = 188;
				Match(THEN);
				State = 189;
				statement();
				State = 195;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 190;
						Match(ELIF);
						State = 191;
						isoExpr();
						State = 192;
						Match(THEN);
						State = 193;
						statement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 197;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 18:
				{
				_localctx = new IfElseExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 199;
				Match(IF);
				State = 200;
				isoExpr();
				State = 201;
				Match(THEN);
				State = 202;
				isoExpr();
				State = 203;
				Match(ELSE);
				State = 204;
				isoExpr();
				}
				break;
			case 19:
				{
				_localctx = new IfElifElseExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 206;
				Match(IF);
				State = 207;
				isoExpr();
				State = 208;
				Match(THEN);
				State = 209;
				isoExpr();
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 210;
					Match(ELIF);
					State = 211;
					isoExpr();
					State = 212;
					Match(THEN);
					State = 213;
					isoExpr();
					}
					}
					State = 217;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ELIF );
				State = 219;
				Match(ELSE);
				State = 220;
				isoExpr();
				}
				break;
			case 20:
				{
				_localctx = new WhileExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 222;
				Match(WHILE);
				State = 223;
				isoExpr();
				State = 224;
				Match(DO);
				State = 225;
				expr(4);
				}
				break;
			case 21:
				{
				_localctx = new ForExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 227;
					Match(FOR);
					State = 228;
					forBind();
					}
					}
					State = 231;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FOR );
				State = 233;
				Match(DO);
				State = 234;
				expr(3);
				}
				break;
			case 22:
				{
				_localctx = new LoopExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 236;
				Match(LOOP);
				State = 237;
				expr(2);
				}
				break;
			case 23:
				{
				_localctx = new FuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 238;
				varDecl(false);
				State = 239;
				Match(OP_ARROW);
				State = 240;
				expr(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 335;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 333;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new AccessExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 244;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 245;
						((AccessExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DOT || _la==OP_COALESCING_ACCESS) ) {
							((AccessExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 246;
						expr(33);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 247;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 248;
						((MultiplicationExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STAR - 64)) | (1L << (DIV - 64)) | (1L << (PERCENT - 64)))) != 0)) ) {
							((MultiplicationExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 249;
						expr(24);
						}
						break;
					case 3:
						{
						_localctx = new AdditionExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 250;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 251;
						((AdditionExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditionExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 252;
						expr(23);
						}
						break;
					case 4:
						{
						_localctx = new ShiftExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 253;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 254;
						((ShiftExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_LEFT_SHIFT || _la==OP_RIGHT_SHIFT) ) {
							((ShiftExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 255;
						expr(22);
						}
						break;
					case 5:
						{
						_localctx = new RelationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 256;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 257;
						((RelationExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (LT - 73)) | (1L << (GT - 73)) | (1L << (OP_LE - 73)) | (1L << (OP_GE - 73)))) != 0)) ) {
							((RelationExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 258;
						expr(21);
						}
						break;
					case 6:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 259;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 260;
						((EqualityExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_EQ || _la==OP_NE) ) {
							((EqualityExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 261;
						expr(20);
						}
						break;
					case 7:
						{
						_localctx = new LogicalAndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 262;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 263;
						((LogicalAndExprContext)_localctx).op = Match(AMP);
						State = 264;
						expr(19);
						}
						break;
					case 8:
						{
						_localctx = new LogicalXorExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 265;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 266;
						((LogicalXorExprContext)_localctx).op = Match(CARET);
						State = 267;
						expr(18);
						}
						break;
					case 9:
						{
						_localctx = new LogicalOrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 268;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 269;
						((LogicalOrExprContext)_localctx).op = Match(PIPE);
						State = 270;
						expr(17);
						}
						break;
					case 10:
						{
						_localctx = new ConditionalAndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 271;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 272;
						((ConditionalAndExprContext)_localctx).op = Match(OP_AND);
						State = 273;
						expr(16);
						}
						break;
					case 11:
						{
						_localctx = new ConditionalOrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 274;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 275;
						((ConditionalOrExprContext)_localctx).op = Match(OP_OR);
						State = 276;
						expr(15);
						}
						break;
					case 12:
						{
						_localctx = new CoalescingExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 277;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 278;
						((CoalescingExprContext)_localctx).op = Match(OP_COALESCING);
						State = 279;
						expr(14);
						}
						break;
					case 13:
						{
						_localctx = new RightPipelineExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 280;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 281;
						Match(OP_RIGHT_PIPELINE);
						State = 282;
						expr(13);
						}
						break;
					case 14:
						{
						_localctx = new LeftPipelineExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 283;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 284;
						Match(OP_LEFT_PIPELINE);
						State = 285;
						expr(11);
						}
						break;
					case 15:
						{
						_localctx = new AssignExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 286;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 287;
						((AssignExprContext)_localctx).op = Match(OP_ASSIGNMENT);
						State = 288;
						expr(10);
						}
						break;
					case 16:
						{
						_localctx = new CastExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 289;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 290;
						Match(DOT);
						State = 291;
						Match(CAST);
						}
						break;
					case 17:
						{
						_localctx = new EvalUnitFuncExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 292;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 293;
						Match(OPEN_PAREN);
						State = 294;
						Match(CLOSE_PAREN);
						}
						break;
					case 18:
						{
						_localctx = new EvalSingleFuncExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 295;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 296;
						Match(OPEN_PAREN);
						State = 297;
						argExpr();
						State = 298;
						Match(CLOSE_PAREN);
						}
						break;
					case 19:
						{
						_localctx = new EvalTupleFuncExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 300;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 301;
						Match(OPEN_PAREN);
						State = 302;
						argExpr();
						State = 305;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 303;
							Match(COMMA);
							State = 304;
							argExpr();
							}
							}
							State = 307;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==COMMA );
						State = 309;
						Match(CLOSE_PAREN);
						}
						break;
					case 20:
						{
						_localctx = new EvalSpreadFuncExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 311;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 312;
						Match(OPEN_PAREN);
						State = 313;
						Match(OP_SPREAD);
						State = 314;
						expr(0);
						State = 315;
						Match(CLOSE_PAREN);
						}
						break;
					case 21:
						{
						_localctx = new EvalSingleKeyExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 317;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 318;
						Match(OPEN_BRACKET);
						State = 319;
						expr(0);
						State = 320;
						Match(CLOSE_BRACKET);
						}
						break;
					case 22:
						{
						_localctx = new EvalTupleKeyExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 322;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 323;
						Match(OPEN_BRACKET);
						State = 324;
						expr(0);
						State = 327;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 325;
							Match(COMMA);
							State = 326;
							expr(0);
							}
							}
							State = 329;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==COMMA );
						State = 331;
						Match(CLOSE_BRACKET);
						}
						break;
					}
					} 
				}
				State = 337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IterExprContext : ParserRuleContext {
		public IterExprResult result;
		public IterExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterExpr; } }
	 
		public IterExprContext() { }
		public virtual void CopyFrom(IterExprContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class ElementsIterExprContext : IterExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IsoExprContext[] isoExpr() {
			return GetRuleContexts<IsoExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsoExprContext isoExpr(int i) {
			return GetRuleContext<IsoExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public ElementsIterExprContext(IterExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterElementsIterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitElementsIterExpr(this);
		}
	}
	public partial class SteppedRangeIterExprContext : IterExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_RANGE() { return GetTokens(TeuchiUdonParser.OP_RANGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE(int i) {
			return GetToken(TeuchiUdonParser.OP_RANGE, i);
		}
		public SteppedRangeIterExprContext(IterExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSteppedRangeIterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSteppedRangeIterExpr(this);
		}
	}
	public partial class RangeIterExprContext : IterExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE() { return GetToken(TeuchiUdonParser.OP_RANGE, 0); }
		public RangeIterExprContext(IterExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRangeIterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRangeIterExpr(this);
		}
	}
	public partial class SpreadIterExprContext : IterExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SPREAD() { return GetToken(TeuchiUdonParser.OP_SPREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SpreadIterExprContext(IterExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSpreadIterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSpreadIterExpr(this);
		}
	}

	[RuleVersion(0)]
	public IterExprContext iterExpr() {
		IterExprContext _localctx = new IterExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_iterExpr);
		try {
			int _alt;
			State = 358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				_localctx = new ElementsIterExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 338;
				isoExpr();
				State = 343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 339;
						Match(COMMA);
						State = 340;
						isoExpr();
						}
						} 
					}
					State = 345;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				}
				break;
			case 2:
				_localctx = new RangeIterExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 346;
				expr(0);
				State = 347;
				Match(OP_RANGE);
				State = 348;
				expr(0);
				}
				break;
			case 3:
				_localctx = new SteppedRangeIterExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 350;
				expr(0);
				State = 351;
				Match(OP_RANGE);
				State = 352;
				expr(0);
				State = 353;
				Match(OP_RANGE);
				State = 354;
				expr(0);
				}
				break;
			case 4:
				_localctx = new SpreadIterExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 356;
				Match(OP_SPREAD);
				State = 357;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgExprContext : ParserRuleContext {
		public ArgExprResult result;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(TeuchiUdonParser.REF, 0); }
		public ArgExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterArgExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitArgExpr(this);
		}
	}

	[RuleVersion(0)]
	public ArgExprContext argExpr() {
		ArgExprContext _localctx = new ArgExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_argExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REF) {
				{
				State = 360;
				Match(REF);
				}
			}

			State = 363;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForBindContext : ParserRuleContext {
		public ForBindResult result;
		public int tableIndex;
		public ForBindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forBind; } }
	 
		public ForBindContext() { }
		public virtual void CopyFrom(ForBindContext context) {
			base.CopyFrom(context);
			this.result = context.result;
			this.tableIndex = context.tableIndex;
		}
	}
	public partial class LetForBindContext : ForBindContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(TeuchiUdonParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForIterExprContext forIterExpr() {
			return GetRuleContext<ForIterExprContext>(0);
		}
		public LetForBindContext(ForBindContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLetForBind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLetForBind(this);
		}
	}
	public partial class AssignForBindContext : ForBindContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForIterExprContext forIterExpr() {
			return GetRuleContext<ForIterExprContext>(0);
		}
		public AssignForBindContext(ForBindContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterAssignForBind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitAssignForBind(this);
		}
	}

	[RuleVersion(0)]
	public ForBindContext forBind() {
		ForBindContext _localctx = new ForBindContext(Context, State);
		EnterRule(_localctx, 24, RULE_forBind);
		try {
			State = 374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new LetForBindContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 365;
				Match(LET);
				State = 366;
				varDecl(true);
				State = 367;
				Match(OP_ASSIGNMENT);
				State = 368;
				forIterExpr();
				}
				break;
			case 2:
				_localctx = new AssignForBindContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 370;
				expr(0);
				State = 371;
				Match(OP_ASSIGNMENT);
				State = 372;
				forIterExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIterExprContext : ParserRuleContext {
		public IterExprResult result;
		public ForIterExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIterExpr; } }
	 
		public ForIterExprContext() { }
		public virtual void CopyFrom(ForIterExprContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class RangeForIterExprContext : ForIterExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE() { return GetToken(TeuchiUdonParser.OP_RANGE, 0); }
		public RangeForIterExprContext(ForIterExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRangeForIterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRangeForIterExpr(this);
		}
	}
	public partial class SpreadForIterExprContext : ForIterExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SpreadForIterExprContext(ForIterExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSpreadForIterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSpreadForIterExpr(this);
		}
	}
	public partial class SteppedRangeForIterExprContext : ForIterExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_RANGE() { return GetTokens(TeuchiUdonParser.OP_RANGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE(int i) {
			return GetToken(TeuchiUdonParser.OP_RANGE, i);
		}
		public SteppedRangeForIterExprContext(ForIterExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSteppedRangeForIterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSteppedRangeForIterExpr(this);
		}
	}

	[RuleVersion(0)]
	public ForIterExprContext forIterExpr() {
		ForIterExprContext _localctx = new ForIterExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_forIterExpr);
		try {
			State = 387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				_localctx = new RangeForIterExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 376;
				expr(0);
				State = 377;
				Match(OP_RANGE);
				State = 378;
				expr(0);
				}
				break;
			case 2:
				_localctx = new SteppedRangeForIterExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 380;
				expr(0);
				State = 381;
				Match(OP_RANGE);
				State = 382;
				expr(0);
				State = 383;
				Match(OP_RANGE);
				State = 384;
				expr(0);
				}
				break;
			case 3:
				_localctx = new SpreadForIterExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 386;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsoExprContext : ParserRuleContext {
		public IsoExprResult result;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IsoExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isoExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIsoExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIsoExpr(this);
		}
	}

	[RuleVersion(0)]
	public IsoExprContext isoExpr() {
		IsoExprContext _localctx = new IsoExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_isoExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralResult result;
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class HexIntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.HEX_INTEGER_LITERAL, 0); }
		public HexIntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterHexIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitHexIntegerLiteral(this);
		}
	}
	public partial class VervatiumStringContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_STRING() { return GetToken(TeuchiUdonParser.VERBATIUM_STRING, 0); }
		public VervatiumStringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVervatiumString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVervatiumString(this);
		}
	}
	public partial class RealLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(TeuchiUdonParser.REAL_LITERAL, 0); }
		public RealLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRealLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRealLiteral(this);
		}
	}
	public partial class BoolLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LITERAL() { return GetToken(TeuchiUdonParser.BOOL_LITERAL, 0); }
		public BoolLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
	}
	public partial class RegularStringContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING() { return GetToken(TeuchiUdonParser.REGULAR_STRING, 0); }
		public RegularStringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRegularString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRegularString(this);
		}
	}
	public partial class UnitLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public UnitLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterUnitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitUnitLiteral(this);
		}
	}
	public partial class NullLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(TeuchiUdonParser.NULL_LITERAL, 0); }
		public NullLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}
	public partial class IntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}
	public partial class BinIntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.BIN_INTEGER_LITERAL, 0); }
		public BinIntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBinIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBinIntegerLiteral(this);
		}
	}
	public partial class CharacterLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(TeuchiUdonParser.CHARACTER_LITERAL, 0); }
		public CharacterLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterCharacterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitCharacterLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 30, RULE_literal);
		try {
			State = 402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				_localctx = new UnitLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 391;
				Match(OPEN_PAREN);
				State = 392;
				Match(CLOSE_PAREN);
				}
				break;
			case NULL_LITERAL:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 393;
				Match(NULL_LITERAL);
				}
				break;
			case BOOL_LITERAL:
				_localctx = new BoolLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 394;
				Match(BOOL_LITERAL);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 395;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new HexIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 396;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			case BIN_INTEGER_LITERAL:
				_localctx = new BinIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 397;
				Match(BIN_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				_localctx = new RealLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 398;
				Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new CharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 399;
				Match(CHARACTER_LITERAL);
				}
				break;
			case REGULAR_STRING:
				_localctx = new RegularStringContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 400;
				Match(REGULAR_STRING);
				}
				break;
			case VERBATIUM_STRING:
				_localctx = new VervatiumStringContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 401;
				Match(VERBATIUM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisLiteralContext : ParserRuleContext {
		public ThisResult result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_LITERAL() { return GetToken(TeuchiUdonParser.THIS_LITERAL, 0); }
		public ThisLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thisLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterThisLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitThisLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ThisLiteralContext thisLiteral() {
		ThisLiteralContext _localctx = new ThisLiteralContext(Context, State);
		EnterRule(_localctx, 32, RULE_thisLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			Match(THIS_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedRegularStringContext : ParserRuleContext {
		public InterpolatedStringResult result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATED_REGULAR_STRING_START() { return GetToken(TeuchiUdonParser.INTERPOLATED_REGULAR_STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(TeuchiUdonParser.DOUBLE_QUOTE_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterpolatedRegularStringPartContext[] interpolatedRegularStringPart() {
			return GetRuleContexts<InterpolatedRegularStringPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterpolatedRegularStringPartContext interpolatedRegularStringPart(int i) {
			return GetRuleContext<InterpolatedRegularStringPartContext>(i);
		}
		public InterpolatedRegularStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedRegularString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterInterpolatedRegularString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitInterpolatedRegularString(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedRegularStringContext interpolatedRegularString() {
		InterpolatedRegularStringContext _localctx = new InterpolatedRegularStringContext(Context, State);
		EnterRule(_localctx, 34, RULE_interpolatedRegularString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(INTERPOLATED_REGULAR_STRING_START);
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << IF) | (1L << LET) | (1L << LOOP) | (1L << MUT) | (1L << TYPEOF) | (1L << WHILE) | (1L << NULL_LITERAL) | (1L << BOOL_LITERAL) | (1L << THIS_LITERAL) | (1L << IDENTIFIER) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << BIN_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << VERBATIUM_STRING) | (1L << INTERPOLATED_REGULAR_STRING_START) | (1L << OPEN_BRACE) | (1L << OPEN_PAREN) | (1L << OPEN_BRACKET) | (1L << OPEN_ARRAY) | (1L << PLUS) | (1L << MINUS))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (REGULAR_STRING_INSIDE - 70)))) != 0)) {
				{
				{
				State = 407;
				interpolatedRegularStringPart();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 413;
			Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedRegularStringPartContext : ParserRuleContext {
		public InterpolatedStringPartResult result;
		public InterpolatedRegularStringPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedRegularStringPart; } }
	 
		public InterpolatedRegularStringPartContext() { }
		public virtual void CopyFrom(InterpolatedRegularStringPartContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class ExprInterpolatedStringPartContext : InterpolatedRegularStringPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public IsoExprContext isoExpr() {
			return GetRuleContext<IsoExprContext>(0);
		}
		public ExprInterpolatedStringPartContext(InterpolatedRegularStringPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterExprInterpolatedStringPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitExprInterpolatedStringPart(this);
		}
	}
	public partial class RegularStringInterpolatedStringPartContext : InterpolatedRegularStringPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING_INSIDE() { return GetToken(TeuchiUdonParser.REGULAR_STRING_INSIDE, 0); }
		public RegularStringInterpolatedStringPartContext(InterpolatedRegularStringPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRegularStringInterpolatedStringPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRegularStringInterpolatedStringPart(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedRegularStringPartContext interpolatedRegularStringPart() {
		InterpolatedRegularStringPartContext _localctx = new InterpolatedRegularStringPartContext(Context, State);
		EnterRule(_localctx, 36, RULE_interpolatedRegularStringPart);
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REGULAR_STRING_INSIDE:
				_localctx = new RegularStringInterpolatedStringPartContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 415;
				Match(REGULAR_STRING_INSIDE);
				}
				break;
			case FOR:
			case IF:
			case LET:
			case LOOP:
			case MUT:
			case TYPEOF:
			case WHILE:
			case NULL_LITERAL:
			case BOOL_LITERAL:
			case THIS_LITERAL:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case OPEN_BRACE:
			case OPEN_PAREN:
			case OPEN_BRACKET:
			case OPEN_ARRAY:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				_localctx = new ExprInterpolatedStringPartContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 416;
				isoExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 32);
		case 1: return Precpred(Context, 23);
		case 2: return Precpred(Context, 22);
		case 3: return Precpred(Context, 21);
		case 4: return Precpred(Context, 20);
		case 5: return Precpred(Context, 19);
		case 6: return Precpred(Context, 18);
		case 7: return Precpred(Context, 17);
		case 8: return Precpred(Context, 16);
		case 9: return Precpred(Context, 15);
		case 10: return Precpred(Context, 14);
		case 11: return Precpred(Context, 13);
		case 12: return Precpred(Context, 12);
		case 13: return Precpred(Context, 11);
		case 14: return Precpred(Context, 10);
		case 15: return Precpred(Context, 31);
		case 16: return Precpred(Context, 30);
		case 17: return Precpred(Context, 29);
		case 18: return Precpred(Context, 28);
		case 19: return Precpred(Context, 27);
		case 20: return Precpred(Context, 26);
		case 21: return Precpred(Context, 25);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x61', '\x1A6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '-', '\n', '\x2', '\x3', '\x3', '\x6', 
		'\x3', '\x30', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x31', '\x3', 
		'\x4', '\a', '\x4', '\x35', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x38', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '@', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x46', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', 'S', '\n', '\a', '\f', '\a', '\xE', '\a', 'V', '\v', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'Z', '\n', '\a', '\x3', '\b', '\x5', 
		'\b', ']', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x62', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'r', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', 'y', '\n', '\v', '\f', '\v', '\xE', '\v', '|', '\v', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\x83', '\n', '\v', '\f', '\v', '\xE', '\v', '\x86', '\v', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x6', '\v', '\x93', '\n', '\v', '\r', '\v', '\xE', '\v', '\x94', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xA5', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\xA8', '\v', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x6', '\v', '\xC6', 
		'\n', '\v', '\r', '\v', '\xE', '\v', '\xC7', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x6', '\v', '\xDA', '\n', '\v', 
		'\r', '\v', '\xE', '\v', '\xDB', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x6', '\v', '\xE8', '\n', '\v', '\r', '\v', '\xE', 
		'\v', '\xE9', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\xF5', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x6', '\v', '\x134', '\n', '\v', '\r', '\v', 
		'\xE', '\v', '\x135', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x6', '\v', '\x14A', '\n', '\v', 
		'\r', '\v', '\xE', '\v', '\x14B', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\x150', '\n', '\v', '\f', '\v', '\xE', '\v', '\x153', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x158', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\x15B', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x169', 
		'\n', '\f', '\x3', '\r', '\x5', '\r', '\x16C', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x179', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x186', '\n', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x195', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\a', '\x13', '\x19B', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x19E', 
		'\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x1A4', '\n', '\x14', '\x3', '\x14', '\x2', '\x3', '\x14', 
		'\x15', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '\x2', 
		'\t', '\x4', '\x2', '@', '\x41', 'H', 'I', '\x4', '\x2', '<', '<', 'P', 
		'P', '\x3', '\x2', '\x42', '\x44', '\x3', '\x2', '@', '\x41', '\x3', '\x2', 
		'Y', 'Z', '\x4', '\x2', 'K', 'L', 'V', 'W', '\x3', '\x2', 'T', 'U', '\x2', 
		'\x1ED', '\x2', ',', '\x3', '\x2', '\x2', '\x2', '\x4', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '?', '\x3', '\x2', '\x2', '\x2', '\b', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'G', '\x3', '\x2', '\x2', '\x2', '\f', 'Y', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\\', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x12', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xF4', '\x3', '\x2', '\x2', '\x2', '\x16', '\x168', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x178', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x187', '\x3', '\x2', '\x2', '\x2', ' ', '\x194', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x196', '\x3', '\x2', '\x2', '\x2', '$', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x1A3', '\x3', '\x2', '\x2', '\x2', 
		'(', ')', '\x5', '\x4', '\x3', '\x2', ')', '*', '\a', '\x2', '\x2', '\x3', 
		'*', '-', '\x3', '\x2', '\x2', '\x2', '+', '-', '\a', '\x2', '\x2', '\x3', 
		',', '(', '\x3', '\x2', '\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', 
		'-', '\x3', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\x5', '\x6', '\x4', 
		'\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x35', '\x5', '\b', '\x5', '\x2', '\x34', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x38', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x39', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x39', ':', '\x5', '\n', '\x6', '\x2', ':', ';', '\a', 
		'?', '\x2', '\x2', ';', '@', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x5', 
		'\x14', '\v', '\x2', '=', '>', '\a', '?', '\x2', '\x2', '>', '@', '\x3', 
		'\x2', '\x2', '\x2', '?', '\x36', '\x3', '\x2', '\x2', '\x2', '?', '<', 
		'\x3', '\x2', '\x2', '\x2', '@', '\a', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x46', '\a', '$', '\x2', '\x2', '\x42', '\x46', '\a', '%', '\x2', '\x2', 
		'\x43', '\x46', '\a', '&', '\x2', '\x2', '\x44', '\x46', '\a', '\'', '\x2', 
		'\x2', '\x45', '\x41', '\x3', '\x2', '\x2', '\x2', '\x45', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x46', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'H', '\x5', '\f', '\a', '\x2', 'H', 'I', '\a', 'J', '\x2', 
		'\x2', 'I', 'J', '\x5', '\x14', '\v', '\x2', 'J', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\a', '\x36', '\x2', '\x2', 'L', 'Z', '\a', '\x37', 
		'\x2', '\x2', 'M', 'Z', '\x5', '\xE', '\b', '\x2', 'N', 'O', '\a', '\x36', 
		'\x2', '\x2', 'O', 'T', '\x5', '\xE', '\b', '\x2', 'P', 'Q', '\a', '=', 
		'\x2', '\x2', 'Q', 'S', '\x5', '\xE', '\b', '\x2', 'R', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\x37', 
		'\x2', '\x2', 'X', 'Z', '\x3', '\x2', '\x2', '\x2', 'Y', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'M', '\x3', '\x2', '\x2', '\x2', 'Y', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\r', '\x3', '\x2', '\x2', '\x2', '[', ']', '\a', '\x1B', 
		'\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '\x61', 
		'\x5', '\x10', '\t', '\x2', '_', '`', '\a', '>', '\x2', '\x2', '`', '\x62', 
		'\x5', '\x14', '\v', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\a', '+', '\x2', '\x2', '\x64', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x65', 'r', '\a', '\x1F', '\x2', '\x2', '\x66', 
		'g', '\a', '\x1F', '\x2', '\x2', 'g', 'r', '\x5', '\x14', '\v', '\x2', 
		'h', 'r', '\a', '\r', '\x2', '\x2', 'i', 'j', '\a', '\r', '\x2', '\x2', 
		'j', 'r', '\x5', '\x14', '\v', '\x2', 'k', 'r', '\a', '\n', '\x2', '\x2', 
		'l', 'm', '\a', '\n', '\x2', '\x2', 'm', 'r', '\x5', '\x14', '\v', '\x2', 
		'n', 'o', '\a', '\x18', '\x2', '\x2', 'o', 'r', '\x5', '\n', '\x6', '\x2', 
		'p', 'r', '\x5', '\x14', '\v', '\x2', 'q', '\x65', '\x3', '\x2', '\x2', 
		'\x2', 'q', '\x66', '\x3', '\x2', '\x2', '\x2', 'q', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'i', '\x3', '\x2', '\x2', '\x2', 'q', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'l', '\x3', '\x2', '\x2', '\x2', 'q', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 'r', '\x13', '\x3', 
		'\x2', '\x2', '\x2', 's', 't', '\b', '\v', '\x1', '\x2', 't', 'z', '\a', 
		'\x34', '\x2', '\x2', 'u', 'v', '\x5', '\x12', '\n', '\x2', 'v', 'w', 
		'\a', '?', '\x2', '\x2', 'w', 'y', '\x3', '\x2', '\x2', '\x2', 'x', 'u', 
		'\x3', '\x2', '\x2', '\x2', 'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 
		'x', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', 
		'{', '}', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', 
		'}', '\xF5', '\a', '\x35', '\x2', '\x2', '~', '\x84', '\a', '\x34', '\x2', 
		'\x2', '\x7F', '\x80', '\x5', '\x12', '\n', '\x2', '\x80', '\x81', '\a', 
		'?', '\x2', '\x2', '\x81', '\x83', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x83', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x87', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x5', '\x14', '\v', 
		'\x2', '\x88', '\x89', '\a', '\x35', '\x2', '\x2', '\x89', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x36', '\x2', '\x2', '\x8B', 
		'\x8C', '\x5', '\x14', '\v', '\x2', '\x8C', '\x8D', '\a', '\x37', '\x2', 
		'\x2', '\x8D', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', 
		'\x36', '\x2', '\x2', '\x8F', '\x92', '\x5', '\x14', '\v', '\x2', '\x90', 
		'\x91', '\a', '=', '\x2', '\x2', '\x91', '\x93', '\x5', '\x14', '\v', 
		'\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\a', '\x37', '\x2', '\x2', '\x97', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\a', ':', '\x2', '\x2', '\x99', 
		'\xF5', '\a', ';', '\x2', '\x2', '\x9A', '\x9B', '\a', ':', '\x2', '\x2', 
		'\x9B', '\x9C', '\x5', '\x16', '\f', '\x2', '\x9C', '\x9D', '\a', ';', 
		'\x2', '\x2', '\x9D', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', 
		'\a', '\x38', '\x2', '\x2', '\x9F', '\xF5', '\a', '\x39', '\x2', '\x2', 
		'\xA0', '\xA1', '\a', '\x38', '\x2', '\x2', '\xA1', '\xA6', '\x5', '\x16', 
		'\f', '\x2', '\xA2', '\xA3', '\a', '=', '\x2', '\x2', '\xA3', '\xA5', 
		'\x5', '\x16', '\f', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xAA', '\a', '\x39', '\x2', '\x2', '\xAA', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xF5', '\x5', ' ', '\x11', '\x2', '\xAC', '\xF5', 
		'\x5', '\"', '\x12', '\x2', '\xAD', '\xF5', '\x5', '$', '\x13', '\x2', 
		'\xAE', '\xF5', '\x5', '\x10', '\t', '\x2', '\xAF', '\xF5', '\a', '!', 
		'\x2', '\x2', '\xB0', '\xB1', '\t', '\x2', '\x2', '\x2', '\xB1', '\xF5', 
		'\x5', '\x14', '\v', '\x1A', '\xB2', '\xB3', '\a', '\x18', '\x2', '\x2', 
		'\xB3', '\xB4', '\x5', '\n', '\x6', '\x2', '\xB4', '\xB5', '\a', '\x16', 
		'\x2', '\x2', '\xB5', '\xB6', '\x5', '\x14', '\v', '\v', '\xB6', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x15', '\x2', '\x2', 
		'\xB8', '\xB9', '\x5', '\x1E', '\x10', '\x2', '\xB9', '\xBA', '\a', ' ', 
		'\x2', '\x2', '\xBA', '\xBB', '\x5', '\x12', '\n', '\x2', '\xBB', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', '\x15', '\x2', '\x2', 
		'\xBD', '\xBE', '\x5', '\x1E', '\x10', '\x2', '\xBE', '\xBF', '\a', ' ', 
		'\x2', '\x2', '\xBF', '\xC5', '\x5', '\x12', '\n', '\x2', '\xC0', '\xC1', 
		'\a', '\x10', '\x2', '\x2', '\xC1', '\xC2', '\x5', '\x1E', '\x10', '\x2', 
		'\xC2', '\xC3', '\a', ' ', '\x2', '\x2', '\xC3', '\xC4', '\x5', '\x12', 
		'\n', '\x2', '\xC4', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', 
		'\a', '\x15', '\x2', '\x2', '\xCA', '\xCB', '\x5', '\x1E', '\x10', '\x2', 
		'\xCB', '\xCC', '\a', ' ', '\x2', '\x2', '\xCC', '\xCD', '\x5', '\x1E', 
		'\x10', '\x2', '\xCD', '\xCE', '\a', '\x11', '\x2', '\x2', '\xCE', '\xCF', 
		'\x5', '\x1E', '\x10', '\x2', '\xCF', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD1', '\a', '\x15', '\x2', '\x2', '\xD1', '\xD2', '\x5', '\x1E', 
		'\x10', '\x2', '\xD2', '\xD3', '\a', ' ', '\x2', '\x2', '\xD3', '\xD9', 
		'\x5', '\x1E', '\x10', '\x2', '\xD4', '\xD5', '\a', '\x10', '\x2', '\x2', 
		'\xD5', '\xD6', '\x5', '\x1E', '\x10', '\x2', '\xD6', '\xD7', '\a', ' ', 
		'\x2', '\x2', '\xD7', '\xD8', '\x5', '\x1E', '\x10', '\x2', '\xD8', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', '\x11', '\x2', '\x2', 
		'\xDE', '\xDF', '\x5', '\x1E', '\x10', '\x2', '\xDF', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xE1', '\a', '\"', '\x2', '\x2', '\xE1', '\xE2', 
		'\x5', '\x1E', '\x10', '\x2', '\xE2', '\xE3', '\a', '\xF', '\x2', '\x2', 
		'\xE3', '\xE4', '\x5', '\x14', '\v', '\x6', '\xE4', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE6', '\a', '\x12', '\x2', '\x2', '\xE6', '\xE8', 
		'\x5', '\x1A', '\xE', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\a', '\xF', '\x2', '\x2', 
		'\xEC', '\xED', '\x5', '\x14', '\v', '\x5', '\xED', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xEF', '\a', '\x19', '\x2', '\x2', '\xEF', '\xF5', 
		'\x5', '\x14', '\v', '\x4', '\xF0', '\xF1', '\x5', '\f', '\a', '\x2', 
		'\xF1', '\xF2', '\a', 'S', '\x2', '\x2', '\xF2', '\xF3', '\x5', '\x14', 
		'\v', '\x3', '\xF3', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF4', 's', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '~', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\xF4', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\x98', '\x3', '\x2', '\x2', '\x2', '\xF4', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF5', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF7', '\f', '\"', '\x2', '\x2', '\xF7', '\xF8', '\t', 
		'\x3', '\x2', '\x2', '\xF8', '\x150', '\x5', '\x14', '\v', '#', '\xF9', 
		'\xFA', '\f', '\x19', '\x2', '\x2', '\xFA', '\xFB', '\t', '\x4', '\x2', 
		'\x2', '\xFB', '\x150', '\x5', '\x14', '\v', '\x1A', '\xFC', '\xFD', '\f', 
		'\x18', '\x2', '\x2', '\xFD', '\xFE', '\t', '\x5', '\x2', '\x2', '\xFE', 
		'\x150', '\x5', '\x14', '\v', '\x19', '\xFF', '\x100', '\f', '\x17', '\x2', 
		'\x2', '\x100', '\x101', '\t', '\x6', '\x2', '\x2', '\x101', '\x150', 
		'\x5', '\x14', '\v', '\x18', '\x102', '\x103', '\f', '\x16', '\x2', '\x2', 
		'\x103', '\x104', '\t', '\a', '\x2', '\x2', '\x104', '\x150', '\x5', '\x14', 
		'\v', '\x17', '\x105', '\x106', '\f', '\x15', '\x2', '\x2', '\x106', '\x107', 
		'\t', '\b', '\x2', '\x2', '\x107', '\x150', '\x5', '\x14', '\v', '\x16', 
		'\x108', '\x109', '\f', '\x14', '\x2', '\x2', '\x109', '\x10A', '\a', 
		'\x45', '\x2', '\x2', '\x10A', '\x150', '\x5', '\x14', '\v', '\x15', '\x10B', 
		'\x10C', '\f', '\x13', '\x2', '\x2', '\x10C', '\x10D', '\a', 'G', '\x2', 
		'\x2', '\x10D', '\x150', '\x5', '\x14', '\v', '\x14', '\x10E', '\x10F', 
		'\f', '\x12', '\x2', '\x2', '\x10F', '\x110', '\a', '\x46', '\x2', '\x2', 
		'\x110', '\x150', '\x5', '\x14', '\v', '\x13', '\x111', '\x112', '\f', 
		'\x11', '\x2', '\x2', '\x112', '\x113', '\a', 'Q', '\x2', '\x2', '\x113', 
		'\x150', '\x5', '\x14', '\v', '\x12', '\x114', '\x115', '\f', '\x10', 
		'\x2', '\x2', '\x115', '\x116', '\a', 'R', '\x2', '\x2', '\x116', '\x150', 
		'\x5', '\x14', '\v', '\x11', '\x117', '\x118', '\f', '\xF', '\x2', '\x2', 
		'\x118', '\x119', '\a', 'O', '\x2', '\x2', '\x119', '\x150', '\x5', '\x14', 
		'\v', '\x10', '\x11A', '\x11B', '\f', '\xE', '\x2', '\x2', '\x11B', '\x11C', 
		'\a', '\\', '\x2', '\x2', '\x11C', '\x150', '\x5', '\x14', '\v', '\xF', 
		'\x11D', '\x11E', '\f', '\r', '\x2', '\x2', '\x11E', '\x11F', '\a', '[', 
		'\x2', '\x2', '\x11F', '\x150', '\x5', '\x14', '\v', '\r', '\x120', '\x121', 
		'\f', '\f', '\x2', '\x2', '\x121', '\x122', '\a', 'X', '\x2', '\x2', '\x122', 
		'\x150', '\x5', '\x14', '\v', '\f', '\x123', '\x124', '\f', '!', '\x2', 
		'\x2', '\x124', '\x125', '\a', '<', '\x2', '\x2', '\x125', '\x150', '\a', 
		'\f', '\x2', '\x2', '\x126', '\x127', '\f', ' ', '\x2', '\x2', '\x127', 
		'\x128', '\a', '\x36', '\x2', '\x2', '\x128', '\x150', '\a', '\x37', '\x2', 
		'\x2', '\x129', '\x12A', '\f', '\x1F', '\x2', '\x2', '\x12A', '\x12B', 
		'\a', '\x36', '\x2', '\x2', '\x12B', '\x12C', '\x5', '\x18', '\r', '\x2', 
		'\x12C', '\x12D', '\a', '\x37', '\x2', '\x2', '\x12D', '\x150', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x12F', '\f', '\x1E', '\x2', '\x2', '\x12F', 
		'\x130', '\a', '\x36', '\x2', '\x2', '\x130', '\x133', '\x5', '\x18', 
		'\r', '\x2', '\x131', '\x132', '\a', '=', '\x2', '\x2', '\x132', '\x134', 
		'\x5', '\x18', '\r', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x135', '\x3', '\x2', '\x2', '\x2', '\x135', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\a', '\x37', '\x2', 
		'\x2', '\x138', '\x150', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', 
		'\f', '\x1D', '\x2', '\x2', '\x13A', '\x13B', '\a', '\x36', '\x2', '\x2', 
		'\x13B', '\x13C', '\a', '^', '\x2', '\x2', '\x13C', '\x13D', '\x5', '\x14', 
		'\v', '\x2', '\x13D', '\x13E', '\a', '\x37', '\x2', '\x2', '\x13E', '\x150', 
		'\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\f', '\x1C', '\x2', '\x2', 
		'\x140', '\x141', '\a', '\x38', '\x2', '\x2', '\x141', '\x142', '\x5', 
		'\x14', '\v', '\x2', '\x142', '\x143', '\a', '\x39', '\x2', '\x2', '\x143', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\f', '\x1B', '\x2', 
		'\x2', '\x145', '\x146', '\a', '\x38', '\x2', '\x2', '\x146', '\x149', 
		'\x5', '\x14', '\v', '\x2', '\x147', '\x148', '\a', '=', '\x2', '\x2', 
		'\x148', '\x14A', '\x5', '\x14', '\v', '\x2', '\x149', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', 
		'\a', '\x39', '\x2', '\x2', '\x14E', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\xF6', '\x3', '\x2', '\x2', '\x2', '\x14F', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\x14F', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x14F', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x105', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x114', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x123', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x126', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x144', '\x3', '\x2', '\x2', '\x2', '\x150', '\x153', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x152', '\x3', '\x2', '\x2', '\x2', '\x152', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x151', '\x3', '\x2', '\x2', '\x2', '\x154', '\x159', 
		'\x5', '\x1E', '\x10', '\x2', '\x155', '\x156', '\a', '=', '\x2', '\x2', 
		'\x156', '\x158', '\x5', '\x1E', '\x10', '\x2', '\x157', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', 
		'\x2', '\x15A', '\x169', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\x5', '\x14', '\v', '\x2', 
		'\x15D', '\x15E', '\a', ']', '\x2', '\x2', '\x15E', '\x15F', '\x5', '\x14', 
		'\v', '\x2', '\x15F', '\x169', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', 
		'\x5', '\x14', '\v', '\x2', '\x161', '\x162', '\a', ']', '\x2', '\x2', 
		'\x162', '\x163', '\x5', '\x14', '\v', '\x2', '\x163', '\x164', '\a', 
		']', '\x2', '\x2', '\x164', '\x165', '\x5', '\x14', '\v', '\x2', '\x165', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\a', '^', '\x2', 
		'\x2', '\x167', '\x169', '\x5', '\x14', '\v', '\x2', '\x168', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x160', '\x3', '\x2', '\x2', '\x2', '\x168', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x169', '\x17', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x16C', '\a', '\x1E', '\x2', '\x2', '\x16B', '\x16A', '\x3', '\x2', '\x2', 
		'\x2', '\x16B', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\x5', '\x14', '\v', '\x2', 
		'\x16E', '\x19', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', '\a', '\x18', 
		'\x2', '\x2', '\x170', '\x171', '\x5', '\f', '\a', '\x2', '\x171', '\x172', 
		'\a', 'X', '\x2', '\x2', '\x172', '\x173', '\x5', '\x1C', '\xF', '\x2', 
		'\x173', '\x179', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\x5', 
		'\x14', '\v', '\x2', '\x175', '\x176', '\a', 'X', '\x2', '\x2', '\x176', 
		'\x177', '\x5', '\x1C', '\xF', '\x2', '\x177', '\x179', '\x3', '\x2', 
		'\x2', '\x2', '\x178', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x178', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x179', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x17A', '\x17B', '\x5', '\x14', '\v', '\x2', '\x17B', '\x17C', '\a', 
		']', '\x2', '\x2', '\x17C', '\x17D', '\x5', '\x14', '\v', '\x2', '\x17D', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\x5', '\x14', 
		'\v', '\x2', '\x17F', '\x180', '\a', ']', '\x2', '\x2', '\x180', '\x181', 
		'\x5', '\x14', '\v', '\x2', '\x181', '\x182', '\a', ']', '\x2', '\x2', 
		'\x182', '\x183', '\x5', '\x14', '\v', '\x2', '\x183', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x186', '\x5', '\x14', '\v', '\x2', '\x185', 
		'\x17A', '\x3', '\x2', '\x2', '\x2', '\x185', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x184', '\x3', '\x2', '\x2', '\x2', '\x186', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x5', '\x14', '\v', '\x2', 
		'\x188', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\a', '\x36', 
		'\x2', '\x2', '\x18A', '\x195', '\a', '\x37', '\x2', '\x2', '\x18B', '\x195', 
		'\a', '(', '\x2', '\x2', '\x18C', '\x195', '\a', ')', '\x2', '\x2', '\x18D', 
		'\x195', '\a', ',', '\x2', '\x2', '\x18E', '\x195', '\a', '-', '\x2', 
		'\x2', '\x18F', '\x195', '\a', '.', '\x2', '\x2', '\x190', '\x195', '\a', 
		'/', '\x2', '\x2', '\x191', '\x195', '\a', '\x30', '\x2', '\x2', '\x192', 
		'\x195', '\a', '\x31', '\x2', '\x2', '\x193', '\x195', '\a', '\x32', '\x2', 
		'\x2', '\x194', '\x189', '\x3', '\x2', '\x2', '\x2', '\x194', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x194', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x194', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x190', '\x3', '\x2', '\x2', '\x2', '\x194', '\x191', '\x3', '\x2', '\x2', 
		'\x2', '\x194', '\x192', '\x3', '\x2', '\x2', '\x2', '\x194', '\x193', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x196', '\x197', '\a', '*', '\x2', '\x2', '\x197', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x198', '\x19C', '\a', '\x33', '\x2', '\x2', '\x199', '\x19B', 
		'\x5', '&', '\x14', '\x2', '\x19A', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x19B', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19A', '\x3', 
		'\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x1A0', '\a', '`', '\x2', '\x2', '\x1A0', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x1A1', '\x1A4', '\a', '\x61', '\x2', '\x2', '\x1A2', 
		'\x1A4', '\x5', '\x1E', '\x10', '\x2', '\x1A3', '\x1A1', '\x3', '\x2', 
		'\x2', '\x2', '\x1A3', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\'', 
		'\x3', '\x2', '\x2', '\x2', ' ', ',', '\x31', '\x36', '?', '\x45', 'T', 
		'Y', '\\', '\x61', 'q', 'z', '\x84', '\x94', '\xA6', '\xC7', '\xDB', '\xE9', 
		'\xF4', '\x135', '\x14B', '\x14F', '\x151', '\x159', '\x168', '\x16B', 
		'\x178', '\x185', '\x194', '\x19C', '\x1A3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace akanevrc.TeuchiUdon
