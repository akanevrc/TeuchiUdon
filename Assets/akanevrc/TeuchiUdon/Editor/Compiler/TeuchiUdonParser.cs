//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\TeuchiUdonParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace akanevrc.TeuchiUdon.Editor.Compiler {

    #pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class TeuchiUdonParser : TeuchiUdonBaseParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_COMMENT=2, DELIMITED_COMMENT=3, NEWLINE=4, 
		WS=5, TAB=6, AS=7, BASE=8, BREAK=9, CASE=10, CATCH=11, CONTINUE=12, DATA=13, 
		ELSE=14, FINALLY=15, HIDING=16, IMPORT=17, INTERNAL=18, IF=19, IN=20, 
		IS=21, LET=22, MODULE=23, NAMEOF=24, NAMESPACE=25, NEW=26, NEWTYPE=27, 
		OF=28, OUT=29, PRIVATE=30, PROTECTED=31, PUBLIC=32, REF=33, RETURN=34, 
		THEN=35, THIS=36, THROW=37, TRY=38, TYPE=39, WHERE=40, YIELD=41, INIT=42, 
		EXPORT=43, SYNC=44, LINEAR=45, SMOOTH=46, NULL_LITERAL=47, BOOL_LITERAL=48, 
		IDENTIFIER=49, LITERAL_ACCESS=50, INTEGER_LITERAL=51, HEX_INTEGER_LITERAL=52, 
		BIN_INTEGER_LITERAL=53, REAL_LITERAL=54, CHARACTER_LITERAL=55, REGULAR_STRING=56, 
		VERBATIUM_STRING=57, OPEN_BRACE=58, CLOSE_BRACE=59, OPEN_BRACKET=60, CLOSE_BRACKET=61, 
		OPEN_PAREN=62, CLOSE_PAREN=63, DOT=64, COMMA=65, COLON=66, SEMICOLON=67, 
		PLUS=68, MINUS=69, STAR=70, DIV=71, PERCENT=72, AMP=73, PIPE=74, CARET=75, 
		BANG=76, TILDE=77, ASSIGNMENT=78, LT=79, GT=80, WILDCARD=81, INTERR=82, 
		OP_COALESCING=83, OP_COALESCING_ACCESS=84, OP_INC=85, OP_DEC=86, OP_AND=87, 
		OP_OR=88, OP_XOR=89, OP_ARROW=90, OP_EQ=91, OP_NE=92, OP_LE=93, OP_GE=94, 
		OP_ADD_ASSIGNMENT=95, OP_SUB_ASSIGNMENT=96, OP_MULT_ASSIGNMENT=97, OP_DIV_ASSIGNMENT=98, 
		OP_MOD_ASSIGNMENT=99, OP_AMP_ASSIGNMENT=100, OP_PIPE_ASSIGNMENT=101, OP_CARET_ASSIGNMENT=102, 
		OP_AND_ASSIGNMENT=103, OP_OR_ASSIGNMENT=104, OP_LEFT_SHIFT=105, OP_RIGHT_SHIFT=106, 
		OP_LEFT_SHIFT_ASSIGNMENT=107, OP_RIGHT_SHIFT_ASSIGNMENT=108, OP_COALESCING_ASSIGNMENT=109, 
		OP_RANGE=110, OP_LEFT_PIPELINE=111, OP_RIGHT_PIPELINE=112;
	public const int
		RULE_target = 0, RULE_body = 1, RULE_topStatement = 2, RULE_varAttr = 3, 
		RULE_exprAttr = 4, RULE_varBind = 5, RULE_varDecl = 6, RULE_identifier = 7, 
		RULE_statement = 8, RULE_expr = 9, RULE_literal = 10;
	public static readonly string[] ruleNames = {
		"target", "body", "topStatement", "varAttr", "exprAttr", "varBind", "varDecl", 
		"identifier", "statement", "expr", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, null, null, "'as'", "'base'", 
		"'break'", "'case'", "'catch'", "'continue'", "'data'", "'else'", "'finally'", 
		"'hiding'", "'import'", "'internal'", "'if'", "'in'", "'is'", "'let'", 
		"'module'", "'nameof'", "'namespace'", "'new'", "'newtype'", "'of'", "'out'", 
		"'private'", "'protected'", "'public'", "'ref'", "'return'", "'then'", 
		"'this'", "'throw'", "'try'", "'type'", "'where'", "'yield'", "'@init'", 
		"'@export'", "'@sync'", "'@linear'", "'@smooth'", "'null'", null, null, 
		null, null, null, null, null, null, null, null, "'{'", "'}'", "'['", "']'", 
		"'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'_'", 
		"'?'", "'??'", "'?.'", "'++'", "'--'", "'&&'", "'||'", "'^^'", "'->'", 
		"'=='", "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'&='", "'|='", "'^='", "'&&='", "'||='", "'<<'", "'>>'", "'<<='", "'>>='", 
		"'??='", "'..'", "'<|'", "'|>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "NEWLINE", 
		"WS", "TAB", "AS", "BASE", "BREAK", "CASE", "CATCH", "CONTINUE", "DATA", 
		"ELSE", "FINALLY", "HIDING", "IMPORT", "INTERNAL", "IF", "IN", "IS", "LET", 
		"MODULE", "NAMEOF", "NAMESPACE", "NEW", "NEWTYPE", "OF", "OUT", "PRIVATE", 
		"PROTECTED", "PUBLIC", "REF", "RETURN", "THEN", "THIS", "THROW", "TRY", 
		"TYPE", "WHERE", "YIELD", "INIT", "EXPORT", "SYNC", "LINEAR", "SMOOTH", 
		"NULL_LITERAL", "BOOL_LITERAL", "IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", 
		"HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", 
		"REGULAR_STRING", "VERBATIUM_STRING", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "DOT", "COMMA", "COLON", 
		"SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", "PIPE", 
		"CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "WILDCARD", "INTERR", 
		"OP_COALESCING", "OP_COALESCING_ACCESS", "OP_INC", "OP_DEC", "OP_AND", 
		"OP_OR", "OP_XOR", "OP_ARROW", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", 
		"OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
		"OP_AMP_ASSIGNMENT", "OP_PIPE_ASSIGNMENT", "OP_CARET_ASSIGNMENT", "OP_AND_ASSIGNMENT", 
		"OP_OR_ASSIGNMENT", "OP_LEFT_SHIFT", "OP_RIGHT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", 
		"OP_RIGHT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", "OP_RANGE", "OP_LEFT_PIPELINE", 
		"OP_RIGHT_PIPELINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeuchiUdonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TeuchiUdonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TeuchiUdonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TeuchiUdonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(TeuchiUdonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(TeuchiUdonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TeuchiUdonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TeuchiUdonParser.Eof, 0); }
		public TargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitTarget(this);
		}
	}

	[RuleVersion(0)]
	public TargetContext target() {
		TargetContext _localctx = new TargetContext(Context, State);
		EnterRule(_localctx, 0, RULE_target);
		try {
			State = 31;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 22;
				Match(OPEN_BRACE);
				State = 23;
				body();
				State = 24;
				Match(CLOSE_BRACE);
				State = 25;
				Match(SEMICOLON);
				State = 26;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28;
				body();
				State = 29;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BodyResult result;
		[System.Diagnostics.DebuggerNonUserCode] public TopStatementContext[] topStatement() {
			return GetRuleContexts<TopStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopStatementContext topStatement(int i) {
			return GetRuleContext<TopStatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 33;
				topStatement();
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET) | (1L << NAMEOF) | (1L << INIT) | (1L << EXPORT) | (1L << SYNC) | (1L << LINEAR) | (1L << SMOOTH) | (1L << NULL_LITERAL) | (1L << BOOL_LITERAL) | (1L << IDENTIFIER) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << BIN_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << VERBATIUM_STRING) | (1L << OPEN_BRACE) | (1L << OPEN_PAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PLUS - 68)) | (1L << (MINUS - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (OP_INC - 68)) | (1L << (OP_DEC - 68)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopStatementContext : ParserRuleContext {
		public TopStatementResult result;
		public TopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topStatement; } }
	 
		public TopStatementContext() { }
		public virtual void CopyFrom(TopStatementContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class VarBindTopStatementContext : TopStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TeuchiUdonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarAttrContext[] varAttr() {
			return GetRuleContexts<VarAttrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarAttrContext varAttr(int i) {
			return GetRuleContext<VarAttrContext>(i);
		}
		public VarBindTopStatementContext(TopStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVarBindTopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVarBindTopStatement(this);
		}
	}
	public partial class ExprTopStatementContext : TopStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TeuchiUdonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprAttrContext[] exprAttr() {
			return GetRuleContexts<ExprAttrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprAttrContext exprAttr(int i) {
			return GetRuleContext<ExprAttrContext>(i);
		}
		public ExprTopStatementContext(TopStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterExprTopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitExprTopStatement(this);
		}
	}

	[RuleVersion(0)]
	public TopStatementContext topStatement() {
		TopStatementContext _localctx = new TopStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_topStatement);
		int _la;
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new VarBindTopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INIT) | (1L << EXPORT) | (1L << SYNC) | (1L << LINEAR) | (1L << SMOOTH))) != 0)) {
					{
					{
					State = 38;
					varAttr();
					}
					}
					State = 43;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 44;
				varBind();
				State = 45;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ExprTopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INIT) {
					{
					{
					State = 47;
					exprAttr();
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 53;
				expr(0);
				State = 54;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAttrContext : ParserRuleContext {
		public VarAttrResult result;
		public VarAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAttr; } }
	 
		public VarAttrContext() { }
		public virtual void CopyFrom(VarAttrContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class SyncVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(TeuchiUdonParser.SYNC, 0); }
		public SyncVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSyncVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSyncVarAttr(this);
		}
	}
	public partial class ExportVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(TeuchiUdonParser.EXPORT, 0); }
		public ExportVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterExportVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitExportVarAttr(this);
		}
	}
	public partial class SmoothVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMOOTH() { return GetToken(TeuchiUdonParser.SMOOTH, 0); }
		public SmoothVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSmoothVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSmoothVarAttr(this);
		}
	}
	public partial class InitVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(TeuchiUdonParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public InitVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterInitVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitInitVarAttr(this);
		}
	}
	public partial class LinearVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(TeuchiUdonParser.LINEAR, 0); }
		public LinearVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLinearVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLinearVarAttr(this);
		}
	}

	[RuleVersion(0)]
	public VarAttrContext varAttr() {
		VarAttrContext _localctx = new VarAttrContext(Context, State);
		EnterRule(_localctx, 6, RULE_varAttr);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INIT:
				_localctx = new InitVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				Match(INIT);
				State = 59;
				Match(OPEN_PAREN);
				State = 60;
				identifier();
				State = 61;
				Match(CLOSE_PAREN);
				}
				break;
			case EXPORT:
				_localctx = new ExportVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				Match(EXPORT);
				}
				break;
			case SYNC:
				_localctx = new SyncVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 64;
				Match(SYNC);
				}
				break;
			case LINEAR:
				_localctx = new LinearVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 65;
				Match(LINEAR);
				}
				break;
			case SMOOTH:
				_localctx = new SmoothVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 66;
				Match(SMOOTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprAttrContext : ParserRuleContext {
		public ExprAttrResult result;
		public ExprAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprAttr; } }
	 
		public ExprAttrContext() { }
		public virtual void CopyFrom(ExprAttrContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class InitExprAttrContext : ExprAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(TeuchiUdonParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public InitExprAttrContext(ExprAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterInitExprAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitInitExprAttr(this);
		}
	}

	[RuleVersion(0)]
	public ExprAttrContext exprAttr() {
		ExprAttrContext _localctx = new ExprAttrContext(Context, State);
		EnterRule(_localctx, 8, RULE_exprAttr);
		try {
			_localctx = new InitExprAttrContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(INIT);
			State = 70;
			Match(OPEN_PAREN);
			State = 71;
			identifier();
			State = 72;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarBindContext : ParserRuleContext {
		public VarBindResult result;
		public int tableIndex;
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(TeuchiUdonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarBindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varBind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVarBind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVarBind(this);
		}
	}

	[RuleVersion(0)]
	public VarBindContext varBind() {
		VarBindContext _localctx = new VarBindContext(Context, State);
		EnterRule(_localctx, 10, RULE_varBind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			varDecl(true);
			State = 75;
			Match(ASSIGNMENT);
			State = 76;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public bool isActual;
		public VarDeclResult result;
		public VarDeclContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public VarDeclContext(ParserRuleContext parent, int invokingState, bool isActual)
			: base(parent, invokingState)
		{
			this.isActual = isActual;
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
			this.isActual = context.isActual;
			this.result = context.result;
		}
	}
	public partial class UnitVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public UnitVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterUnitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitUnitVarDecl(this);
		}
	}
	public partial class TupleVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(TeuchiUdonParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(TeuchiUdonParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public TupleVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterTupleVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitTupleVarDecl(this);
		}
	}
	public partial class SingleVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TeuchiUdonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SingleVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSingleVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSingleVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl(bool isActual) {
		VarDeclContext _localctx = new VarDeclContext(Context, State, isActual);
		EnterRule(_localctx, 12, RULE_varDecl);
		int _la;
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new UnitVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				Match(OPEN_PAREN);
				State = 79;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				_localctx = new SingleVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				identifier();
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 81;
					Match(COLON);
					State = 82;
					expr(0);
					}
				}

				}
				break;
			case 3:
				_localctx = new TupleVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 85;
				Match(OPEN_PAREN);
				State = 86;
				identifier();
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 87;
					Match(COLON);
					State = 88;
					expr(0);
					}
				}

				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 91;
					Match(COMMA);
					State = 92;
					identifier();
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLON) {
						{
						State = 93;
						Match(COLON);
						State = 94;
						expr(0);
						}
					}

					}
					}
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 102;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierResult result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TeuchiUdonParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementResult result;
		public int tableIndex;
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
			this.result = context.result;
			this.tableIndex = context.tableIndex;
		}
	}
	public partial class ReturnUnitStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TeuchiUdonParser.RETURN, 0); }
		public ReturnUnitStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterReturnUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitReturnUnitStatement(this);
		}
	}
	public partial class ReturnValueStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TeuchiUdonParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnValueStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterReturnValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitReturnValueStatement(this);
		}
	}
	public partial class BreakUnitStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TeuchiUdonParser.BREAK, 0); }
		public BreakUnitStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBreakUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBreakUnitStatement(this);
		}
	}
	public partial class ContinueValueStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TeuchiUdonParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ContinueValueStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterContinueValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitContinueValueStatement(this);
		}
	}
	public partial class LetBindStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(TeuchiUdonParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		public LetBindStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLetBindStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLetBindStatement(this);
		}
	}
	public partial class ExprStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterExprStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitExprStatement(this);
		}
	}
	public partial class BreakValueStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TeuchiUdonParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BreakValueStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBreakValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBreakValueStatement(this);
		}
	}
	public partial class ContinueUnitStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TeuchiUdonParser.CONTINUE, 0); }
		public ContinueUnitStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterContinueUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitContinueUnitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new ReturnUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				Match(RETURN);
				}
				break;
			case 2:
				_localctx = new ReturnValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				Match(RETURN);
				State = 110;
				expr(0);
				}
				break;
			case 3:
				_localctx = new ContinueUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 111;
				Match(CONTINUE);
				}
				break;
			case 4:
				_localctx = new ContinueValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 112;
				Match(CONTINUE);
				State = 113;
				expr(0);
				}
				break;
			case 5:
				_localctx = new BreakUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 114;
				Match(BREAK);
				}
				break;
			case 6:
				_localctx = new BreakValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 115;
				Match(BREAK);
				State = 116;
				expr(0);
				}
				break;
			case 7:
				_localctx = new LetBindStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 117;
				Match(LET);
				State = 118;
				varBind();
				}
				break;
			case 8:
				_localctx = new ExprStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 119;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprResult result;
		public int tableIndex;
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
			this.result = context.result;
			this.tableIndex = context.tableIndex;
		}
	}
	public partial class UnitBlockExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(TeuchiUdonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(TeuchiUdonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(TeuchiUdonParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(TeuchiUdonParser.SEMICOLON, i);
		}
		public UnitBlockExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterUnitBlockExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitUnitBlockExpr(this);
		}
	}
	public partial class LogicalAndExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(TeuchiUdonParser.AMP, 0); }
		public LogicalAndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpr(this);
		}
	}
	public partial class AssignExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(TeuchiUdonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_ADD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_SUB_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_MULT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_DIV_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_MOD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AMP_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_AMP_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PIPE_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_PIPE_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_CARET_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_CARET_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_AND_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_OR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHT_SHIFT_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_RIGHT_SHIFT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_COALESCING_ASSIGNMENT, 0); }
		public AssignExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
	}
	public partial class EvalVarExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EvalVarExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalVarExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalVarExpr(this);
		}
	}
	public partial class PostfixExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC() { return GetToken(TeuchiUdonParser.OP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC() { return GetToken(TeuchiUdonParser.OP_DEC, 0); }
		public PostfixExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterPostfixExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitPostfixExpr(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(TeuchiUdonParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(TeuchiUdonParser.OP_NE, 0); }
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
	}
	public partial class ValueBlockExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(TeuchiUdonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(TeuchiUdonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(TeuchiUdonParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(TeuchiUdonParser.SEMICOLON, i);
		}
		public ValueBlockExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterValueBlockExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitValueBlockExpr(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
	}
	public partial class MultiplicationExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(TeuchiUdonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(TeuchiUdonParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(TeuchiUdonParser.PERCENT, 0); }
		public MultiplicationExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpr(this);
		}
	}
	public partial class ShiftExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT() { return GetToken(TeuchiUdonParser.OP_LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHT_SHIFT() { return GetToken(TeuchiUdonParser.OP_RIGHT_SHIFT, 0); }
		public ShiftExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
	}
	public partial class EvalSingleFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public EvalSingleFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalSingleFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalSingleFuncExpr(this);
		}
	}
	public partial class AccessExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TeuchiUdonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING_ACCESS() { return GetToken(TeuchiUdonParser.OP_COALESCING_ACCESS, 0); }
		public AccessExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterAccessExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitAccessExpr(this);
		}
	}
	public partial class EvalUnitFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public EvalUnitFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalUnitFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalUnitFuncExpr(this);
		}
	}
	public partial class EvalTupleFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public EvalTupleFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalTupleFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalTupleFuncExpr(this);
		}
	}
	public partial class NameOfExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMEOF() { return GetToken(TeuchiUdonParser.NAMEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public NameOfExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterNameOfExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitNameOfExpr(this);
		}
	}
	public partial class RelationExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(TeuchiUdonParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(TeuchiUdonParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(TeuchiUdonParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(TeuchiUdonParser.OP_GE, 0); }
		public RelationExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRelationExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRelationExpr(this);
		}
	}
	public partial class RangeExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE() { return GetToken(TeuchiUdonParser.OP_RANGE, 0); }
		public RangeExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRangeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRangeExpr(this);
		}
	}
	public partial class ConditionalXorExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(TeuchiUdonParser.OP_XOR, 0); }
		public ConditionalXorExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterConditionalXorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitConditionalXorExpr(this);
		}
	}
	public partial class ConditionalExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(TeuchiUdonParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TeuchiUdonParser.COLON, 0); }
		public ConditionalExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpr(this);
		}
	}
	public partial class FuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ARROW() { return GetToken(TeuchiUdonParser.OP_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitFuncExpr(this);
		}
	}
	public partial class PrefixExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TeuchiUdonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TeuchiUdonParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(TeuchiUdonParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(TeuchiUdonParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC() { return GetToken(TeuchiUdonParser.OP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC() { return GetToken(TeuchiUdonParser.OP_DEC, 0); }
		public PrefixExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterPrefixExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitPrefixExpr(this);
		}
	}
	public partial class ConditionalOrExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(TeuchiUdonParser.OP_OR, 0); }
		public ConditionalOrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpr(this);
		}
	}
	public partial class LogicalOrExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(TeuchiUdonParser.PIPE, 0); }
		public LogicalOrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpr(this);
		}
	}
	public partial class AdditionExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TeuchiUdonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TeuchiUdonParser.MINUS, 0); }
		public AdditionExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterAdditionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitAdditionExpr(this);
		}
	}
	public partial class LetInBindExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(TeuchiUdonParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(TeuchiUdonParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LetInBindExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLetInBindExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLetInBindExpr(this);
		}
	}
	public partial class ConditionalAndExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(TeuchiUdonParser.OP_AND, 0); }
		public ConditionalAndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpr(this);
		}
	}
	public partial class CoalescingExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING() { return GetToken(TeuchiUdonParser.OP_COALESCING, 0); }
		public CoalescingExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterCoalescingExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitCoalescingExpr(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
	}
	public partial class LogicalXorExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(TeuchiUdonParser.CARET, 0); }
		public LogicalXorExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				_localctx = new UnitBlockExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 123;
				Match(OPEN_BRACE);
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONTINUE) | (1L << LET) | (1L << NAMEOF) | (1L << RETURN) | (1L << NULL_LITERAL) | (1L << BOOL_LITERAL) | (1L << IDENTIFIER) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << BIN_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << VERBATIUM_STRING) | (1L << OPEN_BRACE) | (1L << OPEN_PAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PLUS - 68)) | (1L << (MINUS - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (OP_INC - 68)) | (1L << (OP_DEC - 68)))) != 0)) {
					{
					{
					State = 124;
					statement();
					State = 125;
					Match(SEMICOLON);
					}
					}
					State = 131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 132;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				{
				_localctx = new ValueBlockExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 133;
				Match(OPEN_BRACE);
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 134;
						statement();
						State = 135;
						Match(SEMICOLON);
						}
						} 
					}
					State = 141;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				}
				State = 142;
				expr(0);
				State = 143;
				Match(CLOSE_BRACE);
				}
				break;
			case 3:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 145;
				Match(OPEN_PAREN);
				State = 146;
				expr(0);
				State = 147;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 149;
				literal();
				}
				break;
			case 5:
				{
				_localctx = new EvalVarExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150;
				identifier();
				}
				break;
			case 6:
				{
				_localctx = new EvalUnitFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 151;
				identifier();
				State = 152;
				Match(OPEN_PAREN);
				State = 153;
				Match(CLOSE_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new EvalSingleFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 155;
				identifier();
				State = 156;
				Match(OPEN_PAREN);
				State = 157;
				expr(0);
				State = 158;
				Match(CLOSE_PAREN);
				}
				break;
			case 8:
				{
				_localctx = new EvalTupleFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 160;
				identifier();
				State = 161;
				Match(OPEN_PAREN);
				State = 162;
				expr(0);
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 163;
					Match(COMMA);
					State = 164;
					expr(0);
					}
					}
					State = 169;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 170;
				Match(CLOSE_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new NameOfExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 172;
				Match(NAMEOF);
				State = 173;
				Match(OPEN_PAREN);
				State = 174;
				identifier();
				State = 175;
				Match(CLOSE_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new PrefixExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 177;
				((PrefixExprContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PLUS - 68)) | (1L << (MINUS - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (OP_INC - 68)) | (1L << (OP_DEC - 68)))) != 0)) ) {
					((PrefixExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 178;
				expr(18);
				}
				break;
			case 11:
				{
				_localctx = new LetInBindExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 179;
				Match(LET);
				State = 180;
				varBind();
				State = 181;
				Match(IN);
				State = 182;
				expr(2);
				}
				break;
			case 12:
				{
				_localctx = new FuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 184;
				varDecl(false);
				State = 185;
				Match(OP_ARROW);
				State = 186;
				expr(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 243;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new AccessExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 190;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 191;
						((AccessExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DOT || _la==OP_COALESCING_ACCESS) ) {
							((AccessExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 192;
						expr(21);
						}
						break;
					case 2:
						{
						_localctx = new RangeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 193;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 194;
						((RangeExprContext)_localctx).op = Match(OP_RANGE);
						State = 195;
						expr(18);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 196;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 197;
						((MultiplicationExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (STAR - 70)) | (1L << (DIV - 70)) | (1L << (PERCENT - 70)))) != 0)) ) {
							((MultiplicationExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 198;
						expr(17);
						}
						break;
					case 4:
						{
						_localctx = new AdditionExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 199;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 200;
						((AdditionExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditionExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 201;
						expr(16);
						}
						break;
					case 5:
						{
						_localctx = new ShiftExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 202;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 203;
						((ShiftExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_LEFT_SHIFT || _la==OP_RIGHT_SHIFT) ) {
							((ShiftExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 204;
						expr(15);
						}
						break;
					case 6:
						{
						_localctx = new RelationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 205;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 206;
						((RelationExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (LT - 79)) | (1L << (GT - 79)) | (1L << (OP_LE - 79)) | (1L << (OP_GE - 79)))) != 0)) ) {
							((RelationExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 207;
						expr(14);
						}
						break;
					case 7:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 208;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 209;
						((EqualityExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_EQ || _la==OP_NE) ) {
							((EqualityExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 210;
						expr(13);
						}
						break;
					case 8:
						{
						_localctx = new LogicalAndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 211;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 212;
						((LogicalAndExprContext)_localctx).op = Match(AMP);
						State = 213;
						expr(12);
						}
						break;
					case 9:
						{
						_localctx = new LogicalXorExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 214;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 215;
						((LogicalXorExprContext)_localctx).op = Match(CARET);
						State = 216;
						expr(11);
						}
						break;
					case 10:
						{
						_localctx = new LogicalOrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 217;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 218;
						((LogicalOrExprContext)_localctx).op = Match(PIPE);
						State = 219;
						expr(10);
						}
						break;
					case 11:
						{
						_localctx = new ConditionalAndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 220;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 221;
						((ConditionalAndExprContext)_localctx).op = Match(OP_AND);
						State = 222;
						expr(9);
						}
						break;
					case 12:
						{
						_localctx = new ConditionalXorExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 223;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 224;
						((ConditionalXorExprContext)_localctx).op = Match(OP_XOR);
						State = 225;
						expr(8);
						}
						break;
					case 13:
						{
						_localctx = new ConditionalOrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 226;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 227;
						((ConditionalOrExprContext)_localctx).op = Match(OP_OR);
						State = 228;
						expr(7);
						}
						break;
					case 14:
						{
						_localctx = new CoalescingExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 229;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 230;
						((CoalescingExprContext)_localctx).op = Match(OP_COALESCING);
						State = 231;
						expr(6);
						}
						break;
					case 15:
						{
						_localctx = new ConditionalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 232;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 233;
						Match(INTERR);
						State = 234;
						expr(0);
						State = 235;
						Match(COLON);
						State = 236;
						expr(4);
						}
						break;
					case 16:
						{
						_localctx = new AssignExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 238;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 239;
						((AssignExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (ASSIGNMENT - 78)) | (1L << (OP_ADD_ASSIGNMENT - 78)) | (1L << (OP_SUB_ASSIGNMENT - 78)) | (1L << (OP_MULT_ASSIGNMENT - 78)) | (1L << (OP_DIV_ASSIGNMENT - 78)) | (1L << (OP_MOD_ASSIGNMENT - 78)) | (1L << (OP_AMP_ASSIGNMENT - 78)) | (1L << (OP_PIPE_ASSIGNMENT - 78)) | (1L << (OP_CARET_ASSIGNMENT - 78)) | (1L << (OP_AND_ASSIGNMENT - 78)) | (1L << (OP_OR_ASSIGNMENT - 78)) | (1L << (OP_LEFT_SHIFT_ASSIGNMENT - 78)) | (1L << (OP_RIGHT_SHIFT_ASSIGNMENT - 78)) | (1L << (OP_COALESCING_ASSIGNMENT - 78)))) != 0)) ) {
							((AssignExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 240;
						expr(3);
						}
						break;
					case 17:
						{
						_localctx = new PostfixExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 241;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 242;
						((PostfixExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_INC || _la==OP_DEC) ) {
							((PostfixExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralResult result;
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class HexIntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.HEX_INTEGER_LITERAL, 0); }
		public HexIntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterHexIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitHexIntegerLiteral(this);
		}
	}
	public partial class VervatiumStringContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_STRING() { return GetToken(TeuchiUdonParser.VERBATIUM_STRING, 0); }
		public VervatiumStringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVervatiumString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVervatiumString(this);
		}
	}
	public partial class RealLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(TeuchiUdonParser.REAL_LITERAL, 0); }
		public RealLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRealLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRealLiteral(this);
		}
	}
	public partial class BoolLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LITERAL() { return GetToken(TeuchiUdonParser.BOOL_LITERAL, 0); }
		public BoolLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
	}
	public partial class RegularStringContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING() { return GetToken(TeuchiUdonParser.REGULAR_STRING, 0); }
		public RegularStringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRegularString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRegularString(this);
		}
	}
	public partial class NullLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(TeuchiUdonParser.NULL_LITERAL, 0); }
		public NullLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}
	public partial class IntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}
	public partial class BinIntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.BIN_INTEGER_LITERAL, 0); }
		public BinIntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBinIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBinIntegerLiteral(this);
		}
	}
	public partial class CharacterLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(TeuchiUdonParser.CHARACTER_LITERAL, 0); }
		public CharacterLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterCharacterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitCharacterLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 20, RULE_literal);
		try {
			State = 257;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL_LITERAL:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 248;
				Match(NULL_LITERAL);
				}
				break;
			case BOOL_LITERAL:
				_localctx = new BoolLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 249;
				Match(BOOL_LITERAL);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 250;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new HexIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 251;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			case BIN_INTEGER_LITERAL:
				_localctx = new BinIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 252;
				Match(BIN_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				_localctx = new RealLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 253;
				Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new CharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 254;
				Match(CHARACTER_LITERAL);
				}
				break;
			case REGULAR_STRING:
				_localctx = new RegularStringContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 255;
				Match(REGULAR_STRING);
				}
				break;
			case VERBATIUM_STRING:
				_localctx = new VervatiumStringContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 256;
				Match(VERBATIUM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		case 10: return Precpred(Context, 8);
		case 11: return Precpred(Context, 7);
		case 12: return Precpred(Context, 6);
		case 13: return Precpred(Context, 5);
		case 14: return Precpred(Context, 4);
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 19);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'r', '\x106', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\"', '\n', '\x2', '\x3', '\x3', '\x6', '\x3', '%', 
		'\n', '\x3', '\r', '\x3', '\xE', '\x3', '&', '\x3', '\x4', '\a', '\x4', 
		'*', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '-', '\v', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x33', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x36', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', ';', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x46', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'V', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\\', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x62', '\n', '\b', '\a', '\b', '\x64', '\n', '\b', 
		'\f', '\b', '\xE', '\b', 'g', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', 'k', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'{', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\x82', '\n', '\v', '\f', '\v', '\xE', '\v', '\x85', 
		'\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\x8C', '\n', '\v', '\f', '\v', '\xE', '\v', '\x8F', 
		'\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\xA8', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\xAB', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xBF', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\xF6', '\n', '\v', '\f', '\v', '\xE', '\v', '\xF9', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x104', '\n', '\f', 
		'\x3', '\f', '\x2', '\x3', '\x14', '\r', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x2', '\v', '\x5', '\x2', 
		'\x46', 'G', 'N', 'O', 'W', 'X', '\x4', '\x2', '\x42', '\x42', 'V', 'V', 
		'\x3', '\x2', 'H', 'J', '\x3', '\x2', '\x46', 'G', '\x3', '\x2', 'k', 
		'l', '\x4', '\x2', 'Q', 'R', '_', '`', '\x3', '\x2', ']', '^', '\x5', 
		'\x2', 'P', 'P', '\x61', 'j', 'm', 'o', '\x3', '\x2', 'W', 'X', '\x2', 
		'\x137', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x4', '$', '\x3', '\x2', 
		'\x2', '\x2', '\x6', ':', '\x3', '\x2', '\x2', '\x2', '\b', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'G', '\x3', '\x2', '\x2', '\x2', '\f', 'L', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'j', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'l', '\x3', '\x2', '\x2', '\x2', '\x12', 'z', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x16', '\x103', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\a', '<', '\x2', '\x2', '\x19', '\x1A', 
		'\x5', '\x4', '\x3', '\x2', '\x1A', '\x1B', '\a', '=', '\x2', '\x2', '\x1B', 
		'\x1C', '\a', '\x45', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x2', '\x2', 
		'\x3', '\x1D', '\"', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x5', 
		'\x4', '\x3', '\x2', '\x1F', ' ', '\a', '\x2', '\x2', '\x3', ' ', '\"', 
		'\x3', '\x2', '\x2', '\x2', '!', '\x18', '\x3', '\x2', '\x2', '\x2', '!', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\"', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '#', '%', '\x5', '\x6', '\x4', '\x2', '$', '#', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', 
		'\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '(', '*', '\x5', '\b', '\x5', '\x2', ')', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x3', '\x2', 
		'\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x5', '\f', 
		'\a', '\x2', '/', '\x30', '\a', '\x45', '\x2', '\x2', '\x30', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x33', '\x5', '\n', '\x6', '\x2', '\x32', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x37', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x5', '\x14', '\v', 
		'\x2', '\x38', '\x39', '\a', '\x45', '\x2', '\x2', '\x39', ';', '\x3', 
		'\x2', '\x2', '\x2', ':', '+', '\x3', '\x2', '\x2', '\x2', ':', '\x34', 
		'\x3', '\x2', '\x2', '\x2', ';', '\a', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\a', ',', '\x2', '\x2', '=', '>', '\a', '@', '\x2', '\x2', '>', 
		'?', '\x5', '\x10', '\t', '\x2', '?', '@', '\a', '\x41', '\x2', '\x2', 
		'@', '\x46', '\x3', '\x2', '\x2', '\x2', '\x41', '\x46', '\a', '-', '\x2', 
		'\x2', '\x42', '\x46', '\a', '.', '\x2', '\x2', '\x43', '\x46', '\a', 
		'/', '\x2', '\x2', '\x44', '\x46', '\a', '\x30', '\x2', '\x2', '\x45', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x45', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x42', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\t', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', ',', '\x2', '\x2', 'H', 
		'I', '\a', '@', '\x2', '\x2', 'I', 'J', '\x5', '\x10', '\t', '\x2', 'J', 
		'K', '\a', '\x41', '\x2', '\x2', 'K', '\v', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x5', '\xE', '\b', '\x2', 'M', 'N', '\a', 'P', '\x2', '\x2', 
		'N', 'O', '\x5', '\x14', '\v', '\x2', 'O', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\a', '@', '\x2', '\x2', 'Q', 'k', '\a', '\x41', '\x2', 
		'\x2', 'R', 'U', '\x5', '\x10', '\t', '\x2', 'S', 'T', '\a', '\x44', '\x2', 
		'\x2', 'T', 'V', '\x5', '\x14', '\v', '\x2', 'U', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\a', '@', '\x2', '\x2', 'X', '[', '\x5', '\x10', '\t', 
		'\x2', 'Y', 'Z', '\a', '\x44', '\x2', '\x2', 'Z', '\\', '\x5', '\x14', 
		'\v', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x65', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', 
		'\x43', '\x2', '\x2', '^', '\x61', '\x5', '\x10', '\t', '\x2', '_', '`', 
		'\a', '\x44', '\x2', '\x2', '`', '\x62', '\x5', '\x14', '\v', '\x2', '\x61', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x64', '\x3', '\x2', '\x2', '\x2', '\x63', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\a', '\x41', '\x2', '\x2', 'i', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'P', '\x3', '\x2', '\x2', '\x2', 'j', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'W', '\x3', '\x2', '\x2', '\x2', 'k', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\a', '\x33', '\x2', '\x2', 'm', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'n', '{', '\a', '$', '\x2', '\x2', 'o', 'p', 
		'\a', '$', '\x2', '\x2', 'p', '{', '\x5', '\x14', '\v', '\x2', 'q', '{', 
		'\a', '\xE', '\x2', '\x2', 'r', 's', '\a', '\xE', '\x2', '\x2', 's', '{', 
		'\x5', '\x14', '\v', '\x2', 't', '{', '\a', '\v', '\x2', '\x2', 'u', 'v', 
		'\a', '\v', '\x2', '\x2', 'v', '{', '\x5', '\x14', '\v', '\x2', 'w', 'x', 
		'\a', '\x18', '\x2', '\x2', 'x', '{', '\x5', '\f', '\a', '\x2', 'y', '{', 
		'\x5', '\x14', '\v', '\x2', 'z', 'n', '\x3', '\x2', '\x2', '\x2', 'z', 
		'o', '\x3', '\x2', '\x2', '\x2', 'z', 'q', '\x3', '\x2', '\x2', '\x2', 
		'z', 'r', '\x3', '\x2', '\x2', '\x2', 'z', 't', '\x3', '\x2', '\x2', '\x2', 
		'z', 'u', '\x3', '\x2', '\x2', '\x2', 'z', 'w', '\x3', '\x2', '\x2', '\x2', 
		'z', 'y', '\x3', '\x2', '\x2', '\x2', '{', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\b', '\v', '\x1', '\x2', '}', '\x83', '\a', '<', '\x2', 
		'\x2', '~', '\x7F', '\x5', '\x12', '\n', '\x2', '\x7F', '\x80', '\a', 
		'\x45', '\x2', '\x2', '\x80', '\x82', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x86', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x86', '\xBF', '\a', '=', '\x2', 
		'\x2', '\x87', '\x8D', '\a', '<', '\x2', '\x2', '\x88', '\x89', '\x5', 
		'\x12', '\n', '\x2', '\x89', '\x8A', '\a', '\x45', '\x2', '\x2', '\x8A', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\x5', '\x14', '\v', '\x2', '\x91', '\x92', '\a', 
		'=', '\x2', '\x2', '\x92', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\a', '@', '\x2', '\x2', '\x94', '\x95', '\x5', '\x14', '\v', 
		'\x2', '\x95', '\x96', '\a', '\x41', '\x2', '\x2', '\x96', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\xBF', '\x5', '\x16', '\f', '\x2', '\x98', 
		'\xBF', '\x5', '\x10', '\t', '\x2', '\x99', '\x9A', '\x5', '\x10', '\t', 
		'\x2', '\x9A', '\x9B', '\a', '@', '\x2', '\x2', '\x9B', '\x9C', '\a', 
		'\x41', '\x2', '\x2', '\x9C', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9E', '\x5', '\x10', '\t', '\x2', '\x9E', '\x9F', '\a', '@', '\x2', 
		'\x2', '\x9F', '\xA0', '\x5', '\x14', '\v', '\x2', '\xA0', '\xA1', '\a', 
		'\x41', '\x2', '\x2', '\xA1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\x5', '\x10', '\t', '\x2', '\xA3', '\xA4', '\a', '@', '\x2', 
		'\x2', '\xA4', '\xA9', '\x5', '\x14', '\v', '\x2', '\xA5', '\xA6', '\a', 
		'\x43', '\x2', '\x2', '\xA6', '\xA8', '\x5', '\x14', '\v', '\x2', '\xA7', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\x41', '\x2', 
		'\x2', '\xAD', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', 
		'\x1A', '\x2', '\x2', '\xAF', '\xB0', '\a', '@', '\x2', '\x2', '\xB0', 
		'\xB1', '\x5', '\x10', '\t', '\x2', '\xB1', '\xB2', '\a', '\x41', '\x2', 
		'\x2', '\xB2', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\t', 
		'\x2', '\x2', '\x2', '\xB4', '\xBF', '\x5', '\x14', '\v', '\x14', '\xB5', 
		'\xB6', '\a', '\x18', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\f', '\a', 
		'\x2', '\xB7', '\xB8', '\a', '\x16', '\x2', '\x2', '\xB8', '\xB9', '\x5', 
		'\x14', '\v', '\x4', '\xB9', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBB', '\x5', '\xE', '\b', '\x2', '\xBB', '\xBC', '\a', '\\', '\x2', 
		'\x2', '\xBC', '\xBD', '\x5', '\x14', '\v', '\x3', '\xBD', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '|', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\x97', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\x99', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\f', '\x16', '\x2', '\x2', '\xC1', '\xC2', '\t', 
		'\x3', '\x2', '\x2', '\xC2', '\xF6', '\x5', '\x14', '\v', '\x17', '\xC3', 
		'\xC4', '\f', '\x13', '\x2', '\x2', '\xC4', '\xC5', '\a', 'p', '\x2', 
		'\x2', '\xC5', '\xF6', '\x5', '\x14', '\v', '\x14', '\xC6', '\xC7', '\f', 
		'\x12', '\x2', '\x2', '\xC7', '\xC8', '\t', '\x4', '\x2', '\x2', '\xC8', 
		'\xF6', '\x5', '\x14', '\v', '\x13', '\xC9', '\xCA', '\f', '\x11', '\x2', 
		'\x2', '\xCA', '\xCB', '\t', '\x5', '\x2', '\x2', '\xCB', '\xF6', '\x5', 
		'\x14', '\v', '\x12', '\xCC', '\xCD', '\f', '\x10', '\x2', '\x2', '\xCD', 
		'\xCE', '\t', '\x6', '\x2', '\x2', '\xCE', '\xF6', '\x5', '\x14', '\v', 
		'\x11', '\xCF', '\xD0', '\f', '\xF', '\x2', '\x2', '\xD0', '\xD1', '\t', 
		'\a', '\x2', '\x2', '\xD1', '\xF6', '\x5', '\x14', '\v', '\x10', '\xD2', 
		'\xD3', '\f', '\xE', '\x2', '\x2', '\xD3', '\xD4', '\t', '\b', '\x2', 
		'\x2', '\xD4', '\xF6', '\x5', '\x14', '\v', '\xF', '\xD5', '\xD6', '\f', 
		'\r', '\x2', '\x2', '\xD6', '\xD7', '\a', 'K', '\x2', '\x2', '\xD7', '\xF6', 
		'\x5', '\x14', '\v', '\xE', '\xD8', '\xD9', '\f', '\f', '\x2', '\x2', 
		'\xD9', '\xDA', '\a', 'M', '\x2', '\x2', '\xDA', '\xF6', '\x5', '\x14', 
		'\v', '\r', '\xDB', '\xDC', '\f', '\v', '\x2', '\x2', '\xDC', '\xDD', 
		'\a', 'L', '\x2', '\x2', '\xDD', '\xF6', '\x5', '\x14', '\v', '\f', '\xDE', 
		'\xDF', '\f', '\n', '\x2', '\x2', '\xDF', '\xE0', '\a', 'Y', '\x2', '\x2', 
		'\xE0', '\xF6', '\x5', '\x14', '\v', '\v', '\xE1', '\xE2', '\f', '\t', 
		'\x2', '\x2', '\xE2', '\xE3', '\a', '[', '\x2', '\x2', '\xE3', '\xF6', 
		'\x5', '\x14', '\v', '\n', '\xE4', '\xE5', '\f', '\b', '\x2', '\x2', '\xE5', 
		'\xE6', '\a', 'Z', '\x2', '\x2', '\xE6', '\xF6', '\x5', '\x14', '\v', 
		'\t', '\xE7', '\xE8', '\f', '\a', '\x2', '\x2', '\xE8', '\xE9', '\a', 
		'U', '\x2', '\x2', '\xE9', '\xF6', '\x5', '\x14', '\v', '\b', '\xEA', 
		'\xEB', '\f', '\x6', '\x2', '\x2', '\xEB', '\xEC', '\a', 'T', '\x2', '\x2', 
		'\xEC', '\xED', '\x5', '\x14', '\v', '\x2', '\xED', '\xEE', '\a', '\x44', 
		'\x2', '\x2', '\xEE', '\xEF', '\x5', '\x14', '\v', '\x6', '\xEF', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\f', '\x5', '\x2', '\x2', 
		'\xF1', '\xF2', '\t', '\t', '\x2', '\x2', '\xF2', '\xF6', '\x5', '\x14', 
		'\v', '\x5', '\xF3', '\xF4', '\f', '\x15', '\x2', '\x2', '\xF4', '\xF6', 
		'\t', '\n', '\x2', '\x2', '\xF5', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x104', '\a', '\x31', 
		'\x2', '\x2', '\xFB', '\x104', '\a', '\x32', '\x2', '\x2', '\xFC', '\x104', 
		'\a', '\x35', '\x2', '\x2', '\xFD', '\x104', '\a', '\x36', '\x2', '\x2', 
		'\xFE', '\x104', '\a', '\x37', '\x2', '\x2', '\xFF', '\x104', '\a', '\x38', 
		'\x2', '\x2', '\x100', '\x104', '\a', '\x39', '\x2', '\x2', '\x101', '\x104', 
		'\a', ':', '\x2', '\x2', '\x102', '\x104', '\a', ';', '\x2', '\x2', '\x103', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\x103', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x103', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x103', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '!', '&', '+', '\x34', ':', '\x45', 'U', '[', '\x61', '\x65', 
		'j', 'z', '\x83', '\x8D', '\xA9', '\xBE', '\xF5', '\xF7', '\x103',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace akanevrc.TeuchiUdon.Editor.Compiler
