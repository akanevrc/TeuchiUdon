//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\TeuchiUdonParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace akanevrc.TeuchiUdon.Editor.Compiler {

    #pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class TeuchiUdonParser : TeuchiUdonBaseParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_COMMENT=2, DELIMITED_COMMENT=3, NEWLINE=4, 
		WS=5, TAB=6, AS=7, BREAK=8, CASE=9, CAST=10, CONTINUE=11, DATA=12, ELSE=13, 
		HIDING=14, IMPORT=15, IF=16, IN=17, IS=18, LET=19, MODULE=20, MUT=21, 
		NAMEOF=22, NEWTYPE=23, OF=24, REF=25, RETURN=26, THEN=27, TYPE=28, YIELD=29, 
		PUBLIC=30, SYNC=31, LINEAR=32, SMOOTH=33, NULL_LITERAL=34, BOOL_LITERAL=35, 
		THIS_LITERAL=36, IDENTIFIER=37, LITERAL_ACCESS=38, INTEGER_LITERAL=39, 
		HEX_INTEGER_LITERAL=40, BIN_INTEGER_LITERAL=41, REAL_LITERAL=42, CHARACTER_LITERAL=43, 
		REGULAR_STRING=44, VERBATIUM_STRING=45, OPEN_BRACE=46, CLOSE_BRACE=47, 
		OPEN_BRACKET=48, CLOSE_BRACKET=49, OPEN_PAREN=50, CLOSE_PAREN=51, DOT=52, 
		COMMA=53, COLON=54, SEMICOLON=55, PLUS=56, MINUS=57, STAR=58, DIV=59, 
		PERCENT=60, AMP=61, PIPE=62, CARET=63, BANG=64, TILDE=65, BIND=66, LT=67, 
		GT=68, WILDCARD=69, INTERR=70, OP_COALESCING=71, OP_COALESCING_ACCESS=72, 
		OP_AND=73, OP_OR=74, OP_ARROW=75, OP_EQ=76, OP_NE=77, OP_LE=78, OP_GE=79, 
		OP_ASSIGNMENT=80, OP_LEFT_SHIFT=81, OP_RIGHT_SHIFT=82, OP_RANGE=83, OP_LEFT_PIPELINE=84, 
		OP_RIGHT_PIPELINE=85;
	public const int
		RULE_target = 0, RULE_body = 1, RULE_topStatement = 2, RULE_varAttr = 3, 
		RULE_varBind = 4, RULE_varDecl = 5, RULE_qualifiedVar = 6, RULE_identifier = 7, 
		RULE_statement = 8, RULE_expr = 9, RULE_argExpr = 10, RULE_literal = 11, 
		RULE_thisLiteral = 12;
	public static readonly string[] ruleNames = {
		"target", "body", "topStatement", "varAttr", "varBind", "varDecl", "qualifiedVar", 
		"identifier", "statement", "expr", "argExpr", "literal", "thisLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, null, null, "'as'", "'break'", 
		"'case'", "'cast'", "'continue'", "'data'", "'else'", "'hiding'", "'import'", 
		"'if'", "'in'", "'is'", "'let'", "'module'", "'mut'", "'nameof'", "'newtype'", 
		"'of'", "'ref'", "'return'", "'then'", "'type'", "'yield'", "'@public'", 
		"'@sync'", "'@linear'", "'@smooth'", "'null'", null, "'this'", null, null, 
		null, null, null, null, null, null, null, "'{'", "'}'", "'['", "']'", 
		"'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'_'", 
		"'?'", "'??'", "'?.'", "'&&'", "'||'", "'->'", "'=='", "'!='", "'<='", 
		"'>='", "'<-'", "'<<'", "'>>'", "'..'", "'<|'", "'|>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "NEWLINE", 
		"WS", "TAB", "AS", "BREAK", "CASE", "CAST", "CONTINUE", "DATA", "ELSE", 
		"HIDING", "IMPORT", "IF", "IN", "IS", "LET", "MODULE", "MUT", "NAMEOF", 
		"NEWTYPE", "OF", "REF", "RETURN", "THEN", "TYPE", "YIELD", "PUBLIC", "SYNC", 
		"LINEAR", "SMOOTH", "NULL_LITERAL", "BOOL_LITERAL", "THIS_LITERAL", "IDENTIFIER", 
		"LITERAL_ACCESS", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", 
		"REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIUM_STRING", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
		"STAR", "DIV", "PERCENT", "AMP", "PIPE", "CARET", "BANG", "TILDE", "BIND", 
		"LT", "GT", "WILDCARD", "INTERR", "OP_COALESCING", "OP_COALESCING_ACCESS", 
		"OP_AND", "OP_OR", "OP_ARROW", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "OP_ASSIGNMENT", 
		"OP_LEFT_SHIFT", "OP_RIGHT_SHIFT", "OP_RANGE", "OP_LEFT_PIPELINE", "OP_RIGHT_PIPELINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeuchiUdonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TeuchiUdonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TeuchiUdonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TeuchiUdonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TeuchiUdonParser.Eof, 0); }
		public TargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitTarget(this);
		}
	}

	[RuleVersion(0)]
	public TargetContext target() {
		TargetContext _localctx = new TargetContext(Context, State);
		EnterRule(_localctx, 0, RULE_target);
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case MUT:
			case NAMEOF:
			case PUBLIC:
			case SYNC:
			case LINEAR:
			case SMOOTH:
			case NULL_LITERAL:
			case BOOL_LITERAL:
			case THIS_LITERAL:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case OPEN_BRACE:
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26;
				body();
				State = 27;
				Match(Eof);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BodyResult result;
		[System.Diagnostics.DebuggerNonUserCode] public TopStatementContext[] topStatement() {
			return GetRuleContexts<TopStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopStatementContext topStatement(int i) {
			return GetRuleContext<TopStatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 32;
				topStatement();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (LET - 19)) | (1L << (MUT - 19)) | (1L << (NAMEOF - 19)) | (1L << (PUBLIC - 19)) | (1L << (SYNC - 19)) | (1L << (LINEAR - 19)) | (1L << (SMOOTH - 19)) | (1L << (NULL_LITERAL - 19)) | (1L << (BOOL_LITERAL - 19)) | (1L << (THIS_LITERAL - 19)) | (1L << (IDENTIFIER - 19)) | (1L << (INTEGER_LITERAL - 19)) | (1L << (HEX_INTEGER_LITERAL - 19)) | (1L << (BIN_INTEGER_LITERAL - 19)) | (1L << (REAL_LITERAL - 19)) | (1L << (CHARACTER_LITERAL - 19)) | (1L << (REGULAR_STRING - 19)) | (1L << (VERBATIUM_STRING - 19)) | (1L << (OPEN_BRACE - 19)) | (1L << (OPEN_PAREN - 19)) | (1L << (PLUS - 19)) | (1L << (MINUS - 19)) | (1L << (BANG - 19)) | (1L << (TILDE - 19)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopStatementContext : ParserRuleContext {
		public TopStatementResult result;
		public TopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topStatement; } }
	 
		public TopStatementContext() { }
		public virtual void CopyFrom(TopStatementContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class VarBindTopStatementContext : TopStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TeuchiUdonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarAttrContext[] varAttr() {
			return GetRuleContexts<VarAttrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarAttrContext varAttr(int i) {
			return GetRuleContext<VarAttrContext>(i);
		}
		public VarBindTopStatementContext(TopStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVarBindTopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVarBindTopStatement(this);
		}
	}
	public partial class ExprTopStatementContext : TopStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TeuchiUdonParser.SEMICOLON, 0); }
		public ExprTopStatementContext(TopStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterExprTopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitExprTopStatement(this);
		}
	}

	[RuleVersion(0)]
	public TopStatementContext topStatement() {
		TopStatementContext _localctx = new TopStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_topStatement);
		int _la;
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new VarBindTopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << SYNC) | (1L << LINEAR) | (1L << SMOOTH))) != 0)) {
					{
					{
					State = 37;
					varAttr();
					}
					}
					State = 42;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 43;
				varBind();
				State = 44;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ExprTopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				expr(0);
				State = 47;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAttrContext : ParserRuleContext {
		public VarAttrResult result;
		public VarAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAttr; } }
	 
		public VarAttrContext() { }
		public virtual void CopyFrom(VarAttrContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class SyncVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(TeuchiUdonParser.SYNC, 0); }
		public SyncVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSyncVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSyncVarAttr(this);
		}
	}
	public partial class SmoothVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMOOTH() { return GetToken(TeuchiUdonParser.SMOOTH, 0); }
		public SmoothVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSmoothVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSmoothVarAttr(this);
		}
	}
	public partial class PublicVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(TeuchiUdonParser.PUBLIC, 0); }
		public PublicVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterPublicVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitPublicVarAttr(this);
		}
	}
	public partial class LinearVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(TeuchiUdonParser.LINEAR, 0); }
		public LinearVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLinearVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLinearVarAttr(this);
		}
	}

	[RuleVersion(0)]
	public VarAttrContext varAttr() {
		VarAttrContext _localctx = new VarAttrContext(Context, State);
		EnterRule(_localctx, 6, RULE_varAttr);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PUBLIC:
				_localctx = new PublicVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				Match(PUBLIC);
				}
				break;
			case SYNC:
				_localctx = new SyncVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				Match(SYNC);
				}
				break;
			case LINEAR:
				_localctx = new LinearVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 53;
				Match(LINEAR);
				}
				break;
			case SMOOTH:
				_localctx = new SmoothVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 54;
				Match(SMOOTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarBindContext : ParserRuleContext {
		public VarBindResult result;
		public int tableIndex;
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIND() { return GetToken(TeuchiUdonParser.BIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUT() { return GetToken(TeuchiUdonParser.MUT, 0); }
		public VarBindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varBind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVarBind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVarBind(this);
		}
	}

	[RuleVersion(0)]
	public VarBindContext varBind() {
		VarBindContext _localctx = new VarBindContext(Context, State);
		EnterRule(_localctx, 8, RULE_varBind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUT) {
				{
				State = 57;
				Match(MUT);
				}
			}

			State = 60;
			varDecl(true);
			State = 61;
			Match(BIND);
			State = 62;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public bool isActual;
		public VarDeclResult result;
		public VarDeclContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public VarDeclContext(ParserRuleContext parent, int invokingState, bool isActual)
			: base(parent, invokingState)
		{
			this.isActual = isActual;
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
			this.isActual = context.isActual;
			this.result = context.result;
		}
	}
	public partial class UnitVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public UnitVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterUnitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitUnitVarDecl(this);
		}
	}
	public partial class TupleVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedVarContext[] qualifiedVar() {
			return GetRuleContexts<QualifiedVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedVarContext qualifiedVar(int i) {
			return GetRuleContext<QualifiedVarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public TupleVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterTupleVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitTupleVarDecl(this);
		}
	}
	public partial class SingleVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedVarContext qualifiedVar() {
			return GetRuleContext<QualifiedVarContext>(0);
		}
		public SingleVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSingleVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSingleVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl(bool isActual) {
		VarDeclContext _localctx = new VarDeclContext(Context, State, isActual);
		EnterRule(_localctx, 10, RULE_varDecl);
		int _la;
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new UnitVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				Match(OPEN_PAREN);
				State = 65;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				_localctx = new SingleVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				qualifiedVar();
				}
				break;
			case 3:
				_localctx = new TupleVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 67;
				Match(OPEN_PAREN);
				State = 68;
				qualifiedVar();
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 69;
					Match(COMMA);
					State = 70;
					qualifiedVar();
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 76;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedVarContext : ParserRuleContext {
		public QualifiedVarResult result;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TeuchiUdonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public QualifiedVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterQualifiedVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitQualifiedVar(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedVarContext qualifiedVar() {
		QualifiedVarContext _localctx = new QualifiedVarContext(Context, State);
		EnterRule(_localctx, 12, RULE_qualifiedVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			identifier();
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 81;
				Match(COLON);
				State = 82;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierResult result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TeuchiUdonParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementResult result;
		public int tableIndex;
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
			this.result = context.result;
			this.tableIndex = context.tableIndex;
		}
	}
	public partial class ReturnUnitStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TeuchiUdonParser.RETURN, 0); }
		public ReturnUnitStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterReturnUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitReturnUnitStatement(this);
		}
	}
	public partial class ReturnValueStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TeuchiUdonParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnValueStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterReturnValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitReturnValueStatement(this);
		}
	}
	public partial class BreakUnitStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TeuchiUdonParser.BREAK, 0); }
		public BreakUnitStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBreakUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBreakUnitStatement(this);
		}
	}
	public partial class ContinueValueStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TeuchiUdonParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ContinueValueStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterContinueValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitContinueValueStatement(this);
		}
	}
	public partial class LetBindStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(TeuchiUdonParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		public LetBindStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLetBindStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLetBindStatement(this);
		}
	}
	public partial class ExprStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterExprStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitExprStatement(this);
		}
	}
	public partial class BreakValueStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TeuchiUdonParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BreakValueStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBreakValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBreakValueStatement(this);
		}
	}
	public partial class ContinueUnitStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TeuchiUdonParser.CONTINUE, 0); }
		public ContinueUnitStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterContinueUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitContinueUnitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new ReturnUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				Match(RETURN);
				}
				break;
			case 2:
				_localctx = new ReturnValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				Match(RETURN);
				State = 89;
				expr(0);
				}
				break;
			case 3:
				_localctx = new ContinueUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 90;
				Match(CONTINUE);
				}
				break;
			case 4:
				_localctx = new ContinueValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 91;
				Match(CONTINUE);
				State = 92;
				expr(0);
				}
				break;
			case 5:
				_localctx = new BreakUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 93;
				Match(BREAK);
				}
				break;
			case 6:
				_localctx = new BreakValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 94;
				Match(BREAK);
				State = 95;
				expr(0);
				}
				break;
			case 7:
				_localctx = new LetBindStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 96;
				Match(LET);
				State = 97;
				varBind();
				}
				break;
			case 8:
				_localctx = new ExprStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 98;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprResult result;
		public int tableIndex;
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
			this.result = context.result;
			this.tableIndex = context.tableIndex;
		}
	}
	public partial class ThisLiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ThisLiteralContext thisLiteral() {
			return GetRuleContext<ThisLiteralContext>(0);
		}
		public ThisLiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterThisLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitThisLiteralExpr(this);
		}
	}
	public partial class UnitBlockExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(TeuchiUdonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(TeuchiUdonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(TeuchiUdonParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(TeuchiUdonParser.SEMICOLON, i);
		}
		public UnitBlockExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterUnitBlockExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitUnitBlockExpr(this);
		}
	}
	public partial class LogicalAndExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(TeuchiUdonParser.AMP, 0); }
		public LogicalAndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpr(this);
		}
	}
	public partial class AssignExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGNMENT() { return GetToken(TeuchiUdonParser.OP_ASSIGNMENT, 0); }
		public AssignExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
	}
	public partial class EvalVarExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EvalVarExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalVarExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalVarExpr(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(TeuchiUdonParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(TeuchiUdonParser.OP_NE, 0); }
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
	}
	public partial class ValueBlockExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(TeuchiUdonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(TeuchiUdonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(TeuchiUdonParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(TeuchiUdonParser.SEMICOLON, i);
		}
		public ValueBlockExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterValueBlockExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitValueBlockExpr(this);
		}
	}
	public partial class CastExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TeuchiUdonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(TeuchiUdonParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public CastExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterCastExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitCastExpr(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
	}
	public partial class MultiplicationExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(TeuchiUdonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(TeuchiUdonParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(TeuchiUdonParser.PERCENT, 0); }
		public MultiplicationExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpr(this);
		}
	}
	public partial class ShiftExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT() { return GetToken(TeuchiUdonParser.OP_LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHT_SHIFT() { return GetToken(TeuchiUdonParser.OP_RIGHT_SHIFT, 0); }
		public ShiftExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
	}
	public partial class EvalSingleFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgExprContext argExpr() {
			return GetRuleContext<ArgExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public EvalSingleFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalSingleFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalSingleFuncExpr(this);
		}
	}
	public partial class EvalSingleKeyExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(TeuchiUdonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(TeuchiUdonParser.CLOSE_BRACKET, 0); }
		public EvalSingleKeyExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalSingleKeyExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalSingleKeyExpr(this);
		}
	}
	public partial class AccessExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TeuchiUdonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING_ACCESS() { return GetToken(TeuchiUdonParser.OP_COALESCING_ACCESS, 0); }
		public AccessExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterAccessExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitAccessExpr(this);
		}
	}
	public partial class EvalUnitFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public EvalUnitFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalUnitFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalUnitFuncExpr(this);
		}
	}
	public partial class EvalTupleFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgExprContext[] argExpr() {
			return GetRuleContexts<ArgExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgExprContext argExpr(int i) {
			return GetRuleContext<ArgExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public EvalTupleFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalTupleFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalTupleFuncExpr(this);
		}
	}
	public partial class NameOfExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMEOF() { return GetToken(TeuchiUdonParser.NAMEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public NameOfExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterNameOfExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitNameOfExpr(this);
		}
	}
	public partial class RelationExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(TeuchiUdonParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(TeuchiUdonParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(TeuchiUdonParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(TeuchiUdonParser.OP_GE, 0); }
		public RelationExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRelationExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRelationExpr(this);
		}
	}
	public partial class EvalTupleKeyExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(TeuchiUdonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(TeuchiUdonParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public EvalTupleKeyExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalTupleKeyExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalTupleKeyExpr(this);
		}
	}
	public partial class RangeExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE() { return GetToken(TeuchiUdonParser.OP_RANGE, 0); }
		public RangeExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRangeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRangeExpr(this);
		}
	}
	public partial class ConditionalExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(TeuchiUdonParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TeuchiUdonParser.COLON, 0); }
		public ConditionalExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpr(this);
		}
	}
	public partial class FuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ARROW() { return GetToken(TeuchiUdonParser.OP_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitFuncExpr(this);
		}
	}
	public partial class PrefixExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TeuchiUdonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TeuchiUdonParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(TeuchiUdonParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(TeuchiUdonParser.TILDE, 0); }
		public PrefixExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterPrefixExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitPrefixExpr(this);
		}
	}
	public partial class ConditionalOrExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(TeuchiUdonParser.OP_OR, 0); }
		public ConditionalOrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpr(this);
		}
	}
	public partial class LogicalOrExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(TeuchiUdonParser.PIPE, 0); }
		public LogicalOrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpr(this);
		}
	}
	public partial class AdditionExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TeuchiUdonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TeuchiUdonParser.MINUS, 0); }
		public AdditionExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterAdditionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitAdditionExpr(this);
		}
	}
	public partial class LetInBindExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(TeuchiUdonParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(TeuchiUdonParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LetInBindExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLetInBindExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLetInBindExpr(this);
		}
	}
	public partial class ConditionalAndExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(TeuchiUdonParser.OP_AND, 0); }
		public ConditionalAndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpr(this);
		}
	}
	public partial class CoalescingExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING() { return GetToken(TeuchiUdonParser.OP_COALESCING, 0); }
		public CoalescingExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterCoalescingExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitCoalescingExpr(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
	}
	public partial class LogicalXorExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(TeuchiUdonParser.CARET, 0); }
		public LogicalXorExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new UnitBlockExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 102;
				Match(OPEN_BRACE);
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (BREAK - 8)) | (1L << (CONTINUE - 8)) | (1L << (LET - 8)) | (1L << (NAMEOF - 8)) | (1L << (RETURN - 8)) | (1L << (NULL_LITERAL - 8)) | (1L << (BOOL_LITERAL - 8)) | (1L << (THIS_LITERAL - 8)) | (1L << (IDENTIFIER - 8)) | (1L << (INTEGER_LITERAL - 8)) | (1L << (HEX_INTEGER_LITERAL - 8)) | (1L << (BIN_INTEGER_LITERAL - 8)) | (1L << (REAL_LITERAL - 8)) | (1L << (CHARACTER_LITERAL - 8)) | (1L << (REGULAR_STRING - 8)) | (1L << (VERBATIUM_STRING - 8)) | (1L << (OPEN_BRACE - 8)) | (1L << (OPEN_PAREN - 8)) | (1L << (PLUS - 8)) | (1L << (MINUS - 8)) | (1L << (BANG - 8)) | (1L << (TILDE - 8)))) != 0)) {
					{
					{
					State = 103;
					statement();
					State = 104;
					Match(SEMICOLON);
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 111;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				{
				_localctx = new ValueBlockExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 112;
				Match(OPEN_BRACE);
				State = 118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 113;
						statement();
						State = 114;
						Match(SEMICOLON);
						}
						} 
					}
					State = 120;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				State = 121;
				expr(0);
				State = 122;
				Match(CLOSE_BRACE);
				}
				break;
			case 3:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 124;
				Match(OPEN_PAREN);
				State = 125;
				expr(0);
				State = 126;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 128;
				literal();
				}
				break;
			case 5:
				{
				_localctx = new ThisLiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 129;
				thisLiteral();
				}
				break;
			case 6:
				{
				_localctx = new EvalVarExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 130;
				identifier();
				}
				break;
			case 7:
				{
				_localctx = new NameOfExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131;
				Match(NAMEOF);
				State = 132;
				Match(OPEN_PAREN);
				State = 133;
				identifier();
				State = 134;
				Match(CLOSE_PAREN);
				}
				break;
			case 8:
				{
				_localctx = new PrefixExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 136;
				((PrefixExprContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (PLUS - 56)) | (1L << (MINUS - 56)) | (1L << (BANG - 56)) | (1L << (TILDE - 56)))) != 0)) ) {
					((PrefixExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 137;
				expr(17);
				}
				break;
			case 9:
				{
				_localctx = new LetInBindExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 138;
				Match(LET);
				State = 139;
				varBind();
				State = 140;
				Match(IN);
				State = 141;
				expr(2);
				}
				break;
			case 10:
				{
				_localctx = new FuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 143;
				varDecl(false);
				State = 144;
				Match(OP_ARROW);
				State = 145;
				expr(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 241;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 239;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new AccessExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 149;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 150;
						((AccessExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DOT || _la==OP_COALESCING_ACCESS) ) {
							((AccessExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 151;
						expr(26);
						}
						break;
					case 2:
						{
						_localctx = new RangeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 152;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 153;
						((RangeExprContext)_localctx).op = Match(OP_RANGE);
						State = 154;
						expr(17);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 155;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 156;
						((MultiplicationExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << PERCENT))) != 0)) ) {
							((MultiplicationExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 157;
						expr(16);
						}
						break;
					case 4:
						{
						_localctx = new AdditionExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 158;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 159;
						((AdditionExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditionExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 160;
						expr(15);
						}
						break;
					case 5:
						{
						_localctx = new ShiftExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 161;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 162;
						((ShiftExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_LEFT_SHIFT || _la==OP_RIGHT_SHIFT) ) {
							((ShiftExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 163;
						expr(14);
						}
						break;
					case 6:
						{
						_localctx = new RelationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 164;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 165;
						((RelationExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (LT - 67)) | (1L << (GT - 67)) | (1L << (OP_LE - 67)) | (1L << (OP_GE - 67)))) != 0)) ) {
							((RelationExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 166;
						expr(13);
						}
						break;
					case 7:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 167;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 168;
						((EqualityExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_EQ || _la==OP_NE) ) {
							((EqualityExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 169;
						expr(12);
						}
						break;
					case 8:
						{
						_localctx = new LogicalAndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 170;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 171;
						((LogicalAndExprContext)_localctx).op = Match(AMP);
						State = 172;
						expr(11);
						}
						break;
					case 9:
						{
						_localctx = new LogicalXorExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 173;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 174;
						((LogicalXorExprContext)_localctx).op = Match(CARET);
						State = 175;
						expr(10);
						}
						break;
					case 10:
						{
						_localctx = new LogicalOrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 176;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 177;
						((LogicalOrExprContext)_localctx).op = Match(PIPE);
						State = 178;
						expr(9);
						}
						break;
					case 11:
						{
						_localctx = new ConditionalAndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 179;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 180;
						((ConditionalAndExprContext)_localctx).op = Match(OP_AND);
						State = 181;
						expr(8);
						}
						break;
					case 12:
						{
						_localctx = new ConditionalOrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 182;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 183;
						((ConditionalOrExprContext)_localctx).op = Match(OP_OR);
						State = 184;
						expr(7);
						}
						break;
					case 13:
						{
						_localctx = new CoalescingExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 185;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 186;
						((CoalescingExprContext)_localctx).op = Match(OP_COALESCING);
						State = 187;
						expr(6);
						}
						break;
					case 14:
						{
						_localctx = new ConditionalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 188;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 189;
						Match(INTERR);
						State = 190;
						expr(0);
						State = 191;
						Match(COLON);
						State = 192;
						expr(4);
						}
						break;
					case 15:
						{
						_localctx = new AssignExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 194;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 195;
						((AssignExprContext)_localctx).op = Match(OP_ASSIGNMENT);
						State = 196;
						expr(3);
						}
						break;
					case 16:
						{
						_localctx = new CastExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 197;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 198;
						Match(DOT);
						State = 199;
						Match(CAST);
						State = 200;
						Match(OPEN_PAREN);
						State = 201;
						expr(0);
						State = 202;
						Match(CLOSE_PAREN);
						}
						break;
					case 17:
						{
						_localctx = new EvalUnitFuncExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 204;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 205;
						Match(OPEN_PAREN);
						State = 206;
						Match(CLOSE_PAREN);
						}
						break;
					case 18:
						{
						_localctx = new EvalSingleFuncExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 207;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 208;
						Match(OPEN_PAREN);
						State = 209;
						argExpr();
						State = 210;
						Match(CLOSE_PAREN);
						}
						break;
					case 19:
						{
						_localctx = new EvalTupleFuncExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 212;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 213;
						Match(OPEN_PAREN);
						State = 214;
						argExpr();
						State = 217;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 215;
							Match(COMMA);
							State = 216;
							argExpr();
							}
							}
							State = 219;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==COMMA );
						State = 221;
						Match(CLOSE_PAREN);
						}
						break;
					case 20:
						{
						_localctx = new EvalSingleKeyExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 223;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 224;
						Match(OPEN_BRACKET);
						State = 225;
						expr(0);
						State = 226;
						Match(CLOSE_BRACKET);
						}
						break;
					case 21:
						{
						_localctx = new EvalTupleKeyExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 228;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 229;
						Match(OPEN_BRACKET);
						State = 230;
						expr(0);
						State = 233;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 231;
							Match(COMMA);
							State = 232;
							expr(0);
							}
							}
							State = 235;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==COMMA );
						State = 237;
						Match(CLOSE_BRACKET);
						}
						break;
					}
					} 
				}
				State = 243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgExprContext : ParserRuleContext {
		public ArgExprResult result;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(TeuchiUdonParser.REF, 0); }
		public ArgExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterArgExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitArgExpr(this);
		}
	}

	[RuleVersion(0)]
	public ArgExprContext argExpr() {
		ArgExprContext _localctx = new ArgExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_argExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REF) {
				{
				State = 244;
				Match(REF);
				}
			}

			State = 247;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralResult result;
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class HexIntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.HEX_INTEGER_LITERAL, 0); }
		public HexIntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterHexIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitHexIntegerLiteral(this);
		}
	}
	public partial class VervatiumStringContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_STRING() { return GetToken(TeuchiUdonParser.VERBATIUM_STRING, 0); }
		public VervatiumStringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVervatiumString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVervatiumString(this);
		}
	}
	public partial class RealLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(TeuchiUdonParser.REAL_LITERAL, 0); }
		public RealLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRealLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRealLiteral(this);
		}
	}
	public partial class BoolLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LITERAL() { return GetToken(TeuchiUdonParser.BOOL_LITERAL, 0); }
		public BoolLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
	}
	public partial class RegularStringContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING() { return GetToken(TeuchiUdonParser.REGULAR_STRING, 0); }
		public RegularStringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRegularString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRegularString(this);
		}
	}
	public partial class UnitLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public UnitLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterUnitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitUnitLiteral(this);
		}
	}
	public partial class NullLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(TeuchiUdonParser.NULL_LITERAL, 0); }
		public NullLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}
	public partial class IntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}
	public partial class BinIntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.BIN_INTEGER_LITERAL, 0); }
		public BinIntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBinIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBinIntegerLiteral(this);
		}
	}
	public partial class CharacterLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(TeuchiUdonParser.CHARACTER_LITERAL, 0); }
		public CharacterLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterCharacterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitCharacterLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 22, RULE_literal);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				_localctx = new UnitLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				Match(OPEN_PAREN);
				State = 250;
				Match(CLOSE_PAREN);
				}
				break;
			case NULL_LITERAL:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				Match(NULL_LITERAL);
				}
				break;
			case BOOL_LITERAL:
				_localctx = new BoolLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 252;
				Match(BOOL_LITERAL);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 253;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new HexIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 254;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			case BIN_INTEGER_LITERAL:
				_localctx = new BinIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 255;
				Match(BIN_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				_localctx = new RealLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 256;
				Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new CharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 257;
				Match(CHARACTER_LITERAL);
				}
				break;
			case REGULAR_STRING:
				_localctx = new RegularStringContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 258;
				Match(REGULAR_STRING);
				}
				break;
			case VERBATIUM_STRING:
				_localctx = new VervatiumStringContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 259;
				Match(VERBATIUM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisLiteralContext : ParserRuleContext {
		public ThisResult result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_LITERAL() { return GetToken(TeuchiUdonParser.THIS_LITERAL, 0); }
		public ThisLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thisLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterThisLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitThisLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ThisLiteralContext thisLiteral() {
		ThisLiteralContext _localctx = new ThisLiteralContext(Context, State);
		EnterRule(_localctx, 24, RULE_thisLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(THIS_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 25);
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 7);
		case 11: return Precpred(Context, 6);
		case 12: return Precpred(Context, 5);
		case 13: return Precpred(Context, 4);
		case 14: return Precpred(Context, 3);
		case 15: return Precpred(Context, 24);
		case 16: return Precpred(Context, 23);
		case 17: return Precpred(Context, 22);
		case 18: return Precpred(Context, 21);
		case 19: return Precpred(Context, 20);
		case 20: return Precpred(Context, 19);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'W', '\x10B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '!', '\n', '\x2', '\x3', '\x3', '\x6', '\x3', '$', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', '%', '\x3', '\x4', '\a', '\x4', ')', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', ',', '\v', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x34', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', ':', '\n', '\x5', '\x3', '\x6', '\x5', '\x6', 
		'=', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', 'J', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'M', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'Q', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'V', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x66', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'm', '\n', '\v', '\f', '\v', '\xE', '\v', 'p', '\v', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 'w', '\n', 
		'\v', '\f', '\v', '\xE', '\v', 'z', '\v', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x96', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x6', '\v', '\xDC', '\n', '\v', '\r', '\v', '\xE', '\v', 
		'\xDD', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x6', '\v', '\xEC', '\n', '\v', '\r', '\v', '\xE', 
		'\v', '\xED', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xF2', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\xF5', '\v', '\v', '\x3', '\f', '\x5', '\f', 
		'\xF8', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x107', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x2', '\x3', '\x14', 
		'\xF', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x2', '\t', '\x4', '\x2', ':', ';', '\x42', '\x43', 
		'\x4', '\x2', '\x36', '\x36', 'J', 'J', '\x3', '\x2', '<', '>', '\x3', 
		'\x2', ':', ';', '\x3', '\x2', 'S', 'T', '\x4', '\x2', '\x45', '\x46', 
		'P', 'Q', '\x3', '\x2', 'N', 'O', '\x2', '\x13C', '\x2', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '#', '\x3', '\x2', '\x2', '\x2', '\x6', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x39', '\x3', '\x2', '\x2', '\x2', '\n', '<', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'P', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'R', '\x3', '\x2', '\x2', '\x2', '\x10', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x65', '\x3', '\x2', '\x2', '\x2', '\x14', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x18', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x1D', '\x5', '\x4', '\x3', '\x2', '\x1D', '\x1E', '\a', '\x2', 
		'\x2', '\x3', '\x1E', '!', '\x3', '\x2', '\x2', '\x2', '\x1F', '!', '\a', 
		'\x2', '\x2', '\x3', ' ', '\x1C', '\x3', '\x2', '\x2', '\x2', ' ', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '!', '\x3', '\x3', '\x2', '\x2', '\x2', '\"', 
		'$', '\x5', '\x6', '\x4', '\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', 
		'$', '%', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', 
		'%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\'', ')', '\x5', '\b', '\x5', '\x2', '(', '\'', '\x3', '\x2', 
		'\x2', '\x2', ')', ',', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', '-', '\x3', '\x2', 
		'\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x5', '\n', 
		'\x6', '\x2', '.', '/', '\a', '\x39', '\x2', '\x2', '/', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\x14', '\v', '\x2', '\x31', 
		'\x32', '\a', '\x39', '\x2', '\x2', '\x32', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '*', '\x3', '\x2', '\x2', '\x2', '\x33', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\a', '\x3', '\x2', '\x2', '\x2', '\x35', 
		':', '\a', ' ', '\x2', '\x2', '\x36', ':', '\a', '!', '\x2', '\x2', '\x37', 
		':', '\a', '\"', '\x2', '\x2', '\x38', ':', '\a', '#', '\x2', '\x2', '\x39', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x39', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', '\x38', '\x3', 
		'\x2', '\x2', '\x2', ':', '\t', '\x3', '\x2', '\x2', '\x2', ';', '=', 
		'\a', '\x17', '\x2', '\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\x5', '\f', '\a', '\x2', '?', '@', '\a', '\x44', '\x2', '\x2', 
		'@', '\x41', '\x5', '\x14', '\v', '\x2', '\x41', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\a', '\x34', '\x2', '\x2', '\x43', 'Q', '\a', 
		'\x35', '\x2', '\x2', '\x44', 'Q', '\x5', '\xE', '\b', '\x2', '\x45', 
		'\x46', '\a', '\x34', '\x2', '\x2', '\x46', 'K', '\x5', '\xE', '\b', '\x2', 
		'G', 'H', '\a', '\x37', '\x2', '\x2', 'H', 'J', '\x5', '\xE', '\b', '\x2', 
		'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'N', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\a', '\x35', '\x2', '\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x42', '\x3', '\x2', '\x2', '\x2', 'P', '\x44', '\x3', '\x2', '\x2', 
		'\x2', 'P', '\x45', '\x3', '\x2', '\x2', '\x2', 'Q', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'U', '\x5', '\x10', '\t', '\x2', 'S', 'T', '\a', '\x38', 
		'\x2', '\x2', 'T', 'V', '\x5', '\x14', '\v', '\x2', 'U', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'X', '\a', '\'', '\x2', '\x2', 'X', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'Y', '\x66', '\a', '\x1C', '\x2', '\x2', 'Z', 
		'[', '\a', '\x1C', '\x2', '\x2', '[', '\x66', '\x5', '\x14', '\v', '\x2', 
		'\\', '\x66', '\a', '\r', '\x2', '\x2', ']', '^', '\a', '\r', '\x2', '\x2', 
		'^', '\x66', '\x5', '\x14', '\v', '\x2', '_', '\x66', '\a', '\n', '\x2', 
		'\x2', '`', '\x61', '\a', '\n', '\x2', '\x2', '\x61', '\x66', '\x5', '\x14', 
		'\v', '\x2', '\x62', '\x63', '\a', '\x15', '\x2', '\x2', '\x63', '\x66', 
		'\x5', '\n', '\x6', '\x2', '\x64', '\x66', '\x5', '\x14', '\v', '\x2', 
		'\x65', 'Y', '\x3', '\x2', '\x2', '\x2', '\x65', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\\', '\x3', '\x2', '\x2', '\x2', '\x65', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '_', '\x3', '\x2', '\x2', '\x2', '\x65', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x66', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\b', '\v', '\x1', '\x2', 'h', 'n', '\a', '\x30', '\x2', 
		'\x2', 'i', 'j', '\x5', '\x12', '\n', '\x2', 'j', 'k', '\a', '\x39', '\x2', 
		'\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 'l', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'p', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', '\x96', '\a', '\x31', 
		'\x2', '\x2', 'r', 'x', '\a', '\x30', '\x2', '\x2', 's', 't', '\x5', '\x12', 
		'\n', '\x2', 't', 'u', '\a', '\x39', '\x2', '\x2', 'u', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'v', 's', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'y', '{', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', 
		'\x2', '\x2', '{', '|', '\x5', '\x14', '\v', '\x2', '|', '}', '\a', '\x31', 
		'\x2', '\x2', '}', '\x96', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', 
		'\x34', '\x2', '\x2', '\x7F', '\x80', '\x5', '\x14', '\v', '\x2', '\x80', 
		'\x81', '\a', '\x35', '\x2', '\x2', '\x81', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x96', '\x5', '\x18', '\r', '\x2', '\x83', '\x96', '\x5', 
		'\x1A', '\xE', '\x2', '\x84', '\x96', '\x5', '\x10', '\t', '\x2', '\x85', 
		'\x86', '\a', '\x18', '\x2', '\x2', '\x86', '\x87', '\a', '\x34', '\x2', 
		'\x2', '\x87', '\x88', '\x5', '\x10', '\t', '\x2', '\x88', '\x89', '\a', 
		'\x35', '\x2', '\x2', '\x89', '\x96', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\t', '\x2', '\x2', '\x2', '\x8B', '\x96', '\x5', '\x14', '\v', 
		'\x13', '\x8C', '\x8D', '\a', '\x15', '\x2', '\x2', '\x8D', '\x8E', '\x5', 
		'\n', '\x6', '\x2', '\x8E', '\x8F', '\a', '\x13', '\x2', '\x2', '\x8F', 
		'\x90', '\x5', '\x14', '\v', '\x4', '\x90', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x92', '\x5', '\f', '\a', '\x2', '\x92', '\x93', '\a', 
		'M', '\x2', '\x2', '\x93', '\x94', '\x5', '\x14', '\v', '\x3', '\x94', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x95', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x95', 'r', '\x3', '\x2', '\x2', '\x2', '\x95', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x82', '\x3', '\x2', '\x2', '\x2', '\x95', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x85', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x95', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x98', '\f', '\x1B', '\x2', '\x2', '\x98', '\x99', '\t', '\x3', 
		'\x2', '\x2', '\x99', '\xF2', '\x5', '\x14', '\v', '\x1C', '\x9A', '\x9B', 
		'\f', '\x12', '\x2', '\x2', '\x9B', '\x9C', '\a', 'U', '\x2', '\x2', '\x9C', 
		'\xF2', '\x5', '\x14', '\v', '\x13', '\x9D', '\x9E', '\f', '\x11', '\x2', 
		'\x2', '\x9E', '\x9F', '\t', '\x4', '\x2', '\x2', '\x9F', '\xF2', '\x5', 
		'\x14', '\v', '\x12', '\xA0', '\xA1', '\f', '\x10', '\x2', '\x2', '\xA1', 
		'\xA2', '\t', '\x5', '\x2', '\x2', '\xA2', '\xF2', '\x5', '\x14', '\v', 
		'\x11', '\xA3', '\xA4', '\f', '\xF', '\x2', '\x2', '\xA4', '\xA5', '\t', 
		'\x6', '\x2', '\x2', '\xA5', '\xF2', '\x5', '\x14', '\v', '\x10', '\xA6', 
		'\xA7', '\f', '\xE', '\x2', '\x2', '\xA7', '\xA8', '\t', '\a', '\x2', 
		'\x2', '\xA8', '\xF2', '\x5', '\x14', '\v', '\xF', '\xA9', '\xAA', '\f', 
		'\r', '\x2', '\x2', '\xAA', '\xAB', '\t', '\b', '\x2', '\x2', '\xAB', 
		'\xF2', '\x5', '\x14', '\v', '\xE', '\xAC', '\xAD', '\f', '\f', '\x2', 
		'\x2', '\xAD', '\xAE', '\a', '?', '\x2', '\x2', '\xAE', '\xF2', '\x5', 
		'\x14', '\v', '\r', '\xAF', '\xB0', '\f', '\v', '\x2', '\x2', '\xB0', 
		'\xB1', '\a', '\x41', '\x2', '\x2', '\xB1', '\xF2', '\x5', '\x14', '\v', 
		'\f', '\xB2', '\xB3', '\f', '\n', '\x2', '\x2', '\xB3', '\xB4', '\a', 
		'@', '\x2', '\x2', '\xB4', '\xF2', '\x5', '\x14', '\v', '\v', '\xB5', 
		'\xB6', '\f', '\t', '\x2', '\x2', '\xB6', '\xB7', '\a', 'K', '\x2', '\x2', 
		'\xB7', '\xF2', '\x5', '\x14', '\v', '\n', '\xB8', '\xB9', '\f', '\b', 
		'\x2', '\x2', '\xB9', '\xBA', '\a', 'L', '\x2', '\x2', '\xBA', '\xF2', 
		'\x5', '\x14', '\v', '\t', '\xBB', '\xBC', '\f', '\a', '\x2', '\x2', '\xBC', 
		'\xBD', '\a', 'I', '\x2', '\x2', '\xBD', '\xF2', '\x5', '\x14', '\v', 
		'\b', '\xBE', '\xBF', '\f', '\x6', '\x2', '\x2', '\xBF', '\xC0', '\a', 
		'H', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\x14', '\v', '\x2', '\xC1', 
		'\xC2', '\a', '\x38', '\x2', '\x2', '\xC2', '\xC3', '\x5', '\x14', '\v', 
		'\x6', '\xC3', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\f', 
		'\x5', '\x2', '\x2', '\xC5', '\xC6', '\a', 'R', '\x2', '\x2', '\xC6', 
		'\xF2', '\x5', '\x14', '\v', '\x5', '\xC7', '\xC8', '\f', '\x1A', '\x2', 
		'\x2', '\xC8', '\xC9', '\a', '\x36', '\x2', '\x2', '\xC9', '\xCA', '\a', 
		'\f', '\x2', '\x2', '\xCA', '\xCB', '\a', '\x34', '\x2', '\x2', '\xCB', 
		'\xCC', '\x5', '\x14', '\v', '\x2', '\xCC', '\xCD', '\a', '\x35', '\x2', 
		'\x2', '\xCD', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\f', 
		'\x19', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x34', '\x2', '\x2', '\xD0', 
		'\xF2', '\a', '\x35', '\x2', '\x2', '\xD1', '\xD2', '\f', '\x18', '\x2', 
		'\x2', '\xD2', '\xD3', '\a', '\x34', '\x2', '\x2', '\xD3', '\xD4', '\x5', 
		'\x16', '\f', '\x2', '\xD4', '\xD5', '\a', '\x35', '\x2', '\x2', '\xD5', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\f', '\x17', '\x2', 
		'\x2', '\xD7', '\xD8', '\a', '\x34', '\x2', '\x2', '\xD8', '\xDB', '\x5', 
		'\x16', '\f', '\x2', '\xD9', '\xDA', '\a', '\x37', '\x2', '\x2', '\xDA', 
		'\xDC', '\x5', '\x16', '\f', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\a', '\x35', '\x2', 
		'\x2', '\xE0', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\f', 
		'\x16', '\x2', '\x2', '\xE2', '\xE3', '\a', '\x32', '\x2', '\x2', '\xE3', 
		'\xE4', '\x5', '\x14', '\v', '\x2', '\xE4', '\xE5', '\a', '\x33', '\x2', 
		'\x2', '\xE5', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\f', 
		'\x15', '\x2', '\x2', '\xE7', '\xE8', '\a', '\x32', '\x2', '\x2', '\xE8', 
		'\xEB', '\x5', '\x14', '\v', '\x2', '\xE9', '\xEA', '\a', '\x37', '\x2', 
		'\x2', '\xEA', '\xEC', '\x5', '\x14', '\v', '\x2', '\xEB', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', 
		'\x33', '\x2', '\x2', '\xF0', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\xF1', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\x15', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF8', '\a', '\x1B', '\x2', 
		'\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFA', '\x5', '\x14', '\v', '\x2', '\xFA', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xFC', '\a', '\x34', '\x2', '\x2', '\xFC', '\x107', '\a', 
		'\x35', '\x2', '\x2', '\xFD', '\x107', '\a', '$', '\x2', '\x2', '\xFE', 
		'\x107', '\a', '%', '\x2', '\x2', '\xFF', '\x107', '\a', ')', '\x2', '\x2', 
		'\x100', '\x107', '\a', '*', '\x2', '\x2', '\x101', '\x107', '\a', '+', 
		'\x2', '\x2', '\x102', '\x107', '\a', ',', '\x2', '\x2', '\x103', '\x107', 
		'\a', '-', '\x2', '\x2', '\x104', '\x107', '\a', '.', '\x2', '\x2', '\x105', 
		'\x107', '\a', '/', '\x2', '\x2', '\x106', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x106', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\x106', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x102', '\x3', '\x2', '\x2', '\x2', '\x106', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x109', '\a', '&', '\x2', '\x2', '\x109', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x15', ' ', '%', '*', '\x33', '\x39', 
		'<', 'K', 'P', 'U', '\x65', 'n', 'x', '\x95', '\xDD', '\xED', '\xF1', 
		'\xF3', '\xF7', '\x106',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace akanevrc.TeuchiUdon.Editor.Compiler
