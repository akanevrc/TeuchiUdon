//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\TeuchiUdonParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace akanevrc.TeuchiUdon.Editor.Compiler {

    #pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class TeuchiUdonParser : TeuchiUdonBaseParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_COMMENT=2, OPEN_DELIMITED_COMMENT=3, NEWLINE=4, 
		WS=5, TAB=6, AS=7, BASE=8, BREAK=9, CASE=10, CATCH=11, CHECKED=12, CONTINUE=13, 
		DATA=14, DYNAMIC=15, ELSE=16, FINALLY=17, HIDING=18, IMPORT=19, INTERNAL=20, 
		IF=21, IN=22, IS=23, LET=24, MODULE=25, NAMEOF=26, NAMESPACE=27, NEW=28, 
		NEWTYPE=29, OF=30, OUT=31, PRIVATE=32, PROTECTED=33, PUBLIC=34, REF=35, 
		RETURN=36, SIZEOF=37, THEN=38, THIS=39, THROW=40, TRY=41, TYPE=42, TYPEOF=43, 
		UNCHECKED=44, WHERE=45, YIELD=46, INIT=47, EXPORT=48, SYNC=49, LINEAR=50, 
		SMOOTH=51, IDENTIFIER=52, LITERAL_ACCESS=53, INTEGER_LITERAL=54, HEX_INTEGER_LITERAL=55, 
		BIN_INTEGER_LITERAL=56, REAL_LITERAL=57, CHARACTER_LITERAL=58, REGULAR_STRING=59, 
		VERBATIUM_STRING=60, OPEN_BRACE=61, CLOSE_BRACE=62, OPEN_BRACKET=63, CLOSE_BRACKET=64, 
		OPEN_PAREN=65, CLOSE_PAREN=66, DOT=67, COMMA=68, COLON=69, SEMICOLON=70, 
		PLUS=71, MINUS=72, STAR=73, DIV=74, PERCENT=75, AMP=76, BITWISE_OR=77, 
		CARET=78, BANG=79, TILDE=80, ASSIGNMENT=81, LT=82, GT=83, WILDCARD=84, 
		INTERR=85, OP_COALESCING=86, OP_INC=87, OP_DEC=88, OP_AND=89, OP_OR=90, 
		OP_PTR=91, OP_EQ=92, OP_NE=93, OP_LE=94, OP_GE=95, OP_ADD_ASSIGNMENT=96, 
		OP_SUB_ASSIGNMENT=97, OP_MULT_ASSIGNMENT=98, OP_DIV_ASSIGNMENT=99, OP_MOD_ASSIGNMENT=100, 
		OP_AND_ASSIGNMENT=101, OP_OR_ASSIGNMENT=102, OP_XOR_ASSIGNMENT=103, OP_LEFT_SHIFT=104, 
		OP_RIGHT_SHIFT=105, OP_LEFT_SHIFT_ASSIGNMENT=106, OP_RIGHT_SHIFT_ASSIGNMENT=107, 
		OP_COALESCING_ASSIGNMENT=108, OP_RANGE=109, OP_LEFT_PIPELINE=110, OP_RIGHT_PIPELINE=111, 
		OPEN_DELIMITED_COMMENT_INSIDE=112, CLOSE_DELIMITED_COMMENT_INSIDE=113;
	public const int
		RULE_target = 0, RULE_body = 1, RULE_topStatement = 2, RULE_varAttr = 3, 
		RULE_exprAttr = 4, RULE_varBind = 5, RULE_varDecl = 6, RULE_qualified = 7, 
		RULE_identifier = 8, RULE_statement = 9, RULE_expr = 10, RULE_literal = 11;
	public static readonly string[] ruleNames = {
		"target", "body", "topStatement", "varAttr", "exprAttr", "varBind", "varDecl", 
		"qualified", "identifier", "statement", "expr", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, null, null, "'as'", "'base'", 
		"'break'", "'case'", "'catch'", "'checked'", "'continue'", "'data'", "'dynamic'", 
		"'else'", "'finally'", "'hiding'", "'import'", "'internal'", "'if'", "'in'", 
		"'is'", "'let'", "'module'", "'nameof'", "'namespace'", "'new'", "'newtype'", 
		"'of'", "'out'", "'private'", "'protected'", "'public'", "'ref'", "'return'", 
		"'sizeof'", "'then'", "'this'", "'throw'", "'try'", "'type'", "'typeof'", 
		"'unchecked'", "'where'", "'yield'", "'@init'", "'@export'", "'@sync'", 
		"'@linear'", "'@smooth'", null, null, null, null, null, null, null, null, 
		null, "'{'", "'}'", "'['", "']'", "'('", "')'", "'.'", "','", "':'", "';'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", 
		"'='", "'<'", "'>'", "'_'", "'?'", "'??'", "'++'", "'--'", "'&&'", "'||'", 
		"'->'", "'=='", "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'&='", "'|='", "'^='", "'<<'", "'>>'", "'<<='", "'>>='", "'??='", 
		"'..'", "'<|'", "'|>'", "'{/'", "'/}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_COMMENT", "OPEN_DELIMITED_COMMENT", 
		"NEWLINE", "WS", "TAB", "AS", "BASE", "BREAK", "CASE", "CATCH", "CHECKED", 
		"CONTINUE", "DATA", "DYNAMIC", "ELSE", "FINALLY", "HIDING", "IMPORT", 
		"INTERNAL", "IF", "IN", "IS", "LET", "MODULE", "NAMEOF", "NAMESPACE", 
		"NEW", "NEWTYPE", "OF", "OUT", "PRIVATE", "PROTECTED", "PUBLIC", "REF", 
		"RETURN", "SIZEOF", "THEN", "THIS", "THROW", "TRY", "TYPE", "TYPEOF", 
		"UNCHECKED", "WHERE", "YIELD", "INIT", "EXPORT", "SYNC", "LINEAR", "SMOOTH", 
		"IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
		"BIN_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
		"VERBATIUM_STRING", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"OPEN_PAREN", "CLOSE_PAREN", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", 
		"MINUS", "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", 
		"TILDE", "ASSIGNMENT", "LT", "GT", "WILDCARD", "INTERR", "OP_COALESCING", 
		"OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", 
		"OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", 
		"OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", 
		"OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", "OP_RIGHT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", 
		"OP_RIGHT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", "OP_RANGE", "OP_LEFT_PIPELINE", 
		"OP_RIGHT_PIPELINE", "OPEN_DELIMITED_COMMENT_INSIDE", "CLOSE_DELIMITED_COMMENT_INSIDE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeuchiUdonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TeuchiUdonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TeuchiUdonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TeuchiUdonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(TeuchiUdonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(TeuchiUdonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TeuchiUdonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TeuchiUdonParser.Eof, 0); }
		public TargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitTarget(this);
		}
	}

	[RuleVersion(0)]
	public TargetContext target() {
		TargetContext _localctx = new TargetContext(Context, State);
		EnterRule(_localctx, 0, RULE_target);
		try {
			State = 33;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24;
				Match(OPEN_BRACE);
				State = 25;
				body();
				State = 26;
				Match(CLOSE_BRACE);
				State = 27;
				Match(SEMICOLON);
				State = 28;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30;
				body();
				State = 31;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BodyResult result;
		[System.Diagnostics.DebuggerNonUserCode] public TopStatementContext[] topStatement() {
			return GetRuleContexts<TopStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopStatementContext topStatement(int i) {
			return GetRuleContext<TopStatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 35;
				topStatement();
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (LET - 24)) | (1L << (INIT - 24)) | (1L << (EXPORT - 24)) | (1L << (SYNC - 24)) | (1L << (LINEAR - 24)) | (1L << (SMOOTH - 24)) | (1L << (IDENTIFIER - 24)) | (1L << (INTEGER_LITERAL - 24)) | (1L << (HEX_INTEGER_LITERAL - 24)) | (1L << (BIN_INTEGER_LITERAL - 24)) | (1L << (REAL_LITERAL - 24)) | (1L << (CHARACTER_LITERAL - 24)) | (1L << (REGULAR_STRING - 24)) | (1L << (VERBATIUM_STRING - 24)) | (1L << (OPEN_BRACE - 24)) | (1L << (OPEN_PAREN - 24)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopStatementContext : ParserRuleContext {
		public TopStatementResult result;
		public TopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topStatement; } }
	 
		public TopStatementContext() { }
		public virtual void CopyFrom(TopStatementContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class VarBindTopStatementContext : TopStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TeuchiUdonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarAttrContext[] varAttr() {
			return GetRuleContexts<VarAttrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarAttrContext varAttr(int i) {
			return GetRuleContext<VarAttrContext>(i);
		}
		public VarBindTopStatementContext(TopStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVarBindTopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVarBindTopStatement(this);
		}
	}
	public partial class ExprTopStatementContext : TopStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TeuchiUdonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprAttrContext[] exprAttr() {
			return GetRuleContexts<ExprAttrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprAttrContext exprAttr(int i) {
			return GetRuleContext<ExprAttrContext>(i);
		}
		public ExprTopStatementContext(TopStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterExprTopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitExprTopStatement(this);
		}
	}

	[RuleVersion(0)]
	public TopStatementContext topStatement() {
		TopStatementContext _localctx = new TopStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_topStatement);
		int _la;
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new VarBindTopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INIT) | (1L << EXPORT) | (1L << SYNC) | (1L << LINEAR) | (1L << SMOOTH))) != 0)) {
					{
					{
					State = 40;
					varAttr();
					}
					}
					State = 45;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 46;
				varBind();
				State = 47;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ExprTopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INIT) {
					{
					{
					State = 49;
					exprAttr();
					}
					}
					State = 54;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 55;
				expr(0);
				State = 56;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAttrContext : ParserRuleContext {
		public VarAttrResult result;
		public VarAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAttr; } }
	 
		public VarAttrContext() { }
		public virtual void CopyFrom(VarAttrContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class SyncVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(TeuchiUdonParser.SYNC, 0); }
		public SyncVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSyncVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSyncVarAttr(this);
		}
	}
	public partial class ExportVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(TeuchiUdonParser.EXPORT, 0); }
		public ExportVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterExportVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitExportVarAttr(this);
		}
	}
	public partial class SmoothVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMOOTH() { return GetToken(TeuchiUdonParser.SMOOTH, 0); }
		public SmoothVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSmoothVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSmoothVarAttr(this);
		}
	}
	public partial class InitVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(TeuchiUdonParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public InitVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterInitVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitInitVarAttr(this);
		}
	}
	public partial class LinearVarAttrContext : VarAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(TeuchiUdonParser.LINEAR, 0); }
		public LinearVarAttrContext(VarAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLinearVarAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLinearVarAttr(this);
		}
	}

	[RuleVersion(0)]
	public VarAttrContext varAttr() {
		VarAttrContext _localctx = new VarAttrContext(Context, State);
		EnterRule(_localctx, 6, RULE_varAttr);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INIT:
				_localctx = new InitVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				Match(INIT);
				State = 61;
				Match(OPEN_PAREN);
				State = 62;
				identifier();
				State = 63;
				Match(CLOSE_PAREN);
				}
				break;
			case EXPORT:
				_localctx = new ExportVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				Match(EXPORT);
				}
				break;
			case SYNC:
				_localctx = new SyncVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 66;
				Match(SYNC);
				}
				break;
			case LINEAR:
				_localctx = new LinearVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 67;
				Match(LINEAR);
				}
				break;
			case SMOOTH:
				_localctx = new SmoothVarAttrContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 68;
				Match(SMOOTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprAttrContext : ParserRuleContext {
		public ExprAttrResult result;
		public ExprAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprAttr; } }
	 
		public ExprAttrContext() { }
		public virtual void CopyFrom(ExprAttrContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class InitExprAttrContext : ExprAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(TeuchiUdonParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public InitExprAttrContext(ExprAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterInitExprAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitInitExprAttr(this);
		}
	}

	[RuleVersion(0)]
	public ExprAttrContext exprAttr() {
		ExprAttrContext _localctx = new ExprAttrContext(Context, State);
		EnterRule(_localctx, 8, RULE_exprAttr);
		try {
			_localctx = new InitExprAttrContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(INIT);
			State = 72;
			Match(OPEN_PAREN);
			State = 73;
			identifier();
			State = 74;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarBindContext : ParserRuleContext {
		public VarBindResult result;
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(TeuchiUdonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarBindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varBind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVarBind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVarBind(this);
		}
	}

	[RuleVersion(0)]
	public VarBindContext varBind() {
		VarBindContext _localctx = new VarBindContext(Context, State);
		EnterRule(_localctx, 10, RULE_varBind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			varDecl(true);
			State = 77;
			Match(ASSIGNMENT);
			State = 78;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public bool isActual;
		public VarDeclResult result;
		public VarDeclContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public VarDeclContext(ParserRuleContext parent, int invokingState, bool isActual)
			: base(parent, invokingState)
		{
			this.isActual = isActual;
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
			this.isActual = context.isActual;
			this.result = context.result;
		}
	}
	public partial class UnitVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public UnitVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterUnitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitUnitVarDecl(this);
		}
	}
	public partial class TupleVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(TeuchiUdonParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(TeuchiUdonParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedContext[] qualified() {
			return GetRuleContexts<QualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedContext qualified(int i) {
			return GetRuleContext<QualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public TupleVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterTupleVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitTupleVarDecl(this);
		}
	}
	public partial class SingleVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TeuchiUdonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedContext qualified() {
			return GetRuleContext<QualifiedContext>(0);
		}
		public SingleVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSingleVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSingleVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl(bool isActual) {
		VarDeclContext _localctx = new VarDeclContext(Context, State, isActual);
		EnterRule(_localctx, 12, RULE_varDecl);
		int _la;
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new UnitVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				Match(OPEN_PAREN);
				State = 81;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				_localctx = new SingleVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				identifier();
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 83;
					Match(COLON);
					State = 84;
					qualified();
					}
				}

				}
				break;
			case 3:
				_localctx = new TupleVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 87;
				Match(OPEN_PAREN);
				State = 88;
				identifier();
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 89;
					Match(COLON);
					State = 90;
					qualified();
					}
				}

				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 93;
					Match(COMMA);
					State = 94;
					identifier();
					State = 97;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLON) {
						{
						State = 95;
						Match(COLON);
						State = 96;
						qualified();
						}
					}

					}
					}
					State = 103;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 104;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedContext : ParserRuleContext {
		public QualifiedResult result;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TeuchiUdonParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TeuchiUdonParser.DOT, i);
		}
		public QualifiedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterQualified(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitQualified(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedContext qualified() {
		QualifiedContext _localctx = new QualifiedContext(Context, State);
		EnterRule(_localctx, 14, RULE_qualified);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			identifier();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 109;
				Match(DOT);
				State = 110;
				identifier();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierResult result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TeuchiUdonParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementResult result;
		public int tableIndex;
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
			this.result = context.result;
			this.tableIndex = context.tableIndex;
		}
	}
	public partial class ReturnUnitStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TeuchiUdonParser.RETURN, 0); }
		public ReturnUnitStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterReturnUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitReturnUnitStatement(this);
		}
	}
	public partial class ReturnValueStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TeuchiUdonParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnValueStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterReturnValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitReturnValueStatement(this);
		}
	}
	public partial class BreakUnitStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TeuchiUdonParser.BREAK, 0); }
		public BreakUnitStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBreakUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBreakUnitStatement(this);
		}
	}
	public partial class ContinueValueStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TeuchiUdonParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ContinueValueStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterContinueValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitContinueValueStatement(this);
		}
	}
	public partial class LetBindStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(TeuchiUdonParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		public LetBindStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLetBindStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLetBindStatement(this);
		}
	}
	public partial class ExprStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterExprStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitExprStatement(this);
		}
	}
	public partial class BreakValueStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TeuchiUdonParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BreakValueStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBreakValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBreakValueStatement(this);
		}
	}
	public partial class ContinueUnitStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TeuchiUdonParser.CONTINUE, 0); }
		public ContinueUnitStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterContinueUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitContinueUnitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_statement);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new ReturnUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				Match(RETURN);
				}
				break;
			case 2:
				_localctx = new ReturnValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				Match(RETURN);
				State = 120;
				expr(0);
				}
				break;
			case 3:
				_localctx = new ContinueUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 121;
				Match(CONTINUE);
				}
				break;
			case 4:
				_localctx = new ContinueValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 122;
				Match(CONTINUE);
				State = 123;
				expr(0);
				}
				break;
			case 5:
				_localctx = new BreakUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 124;
				Match(BREAK);
				}
				break;
			case 6:
				_localctx = new BreakValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 125;
				Match(BREAK);
				State = 126;
				expr(0);
				}
				break;
			case 7:
				_localctx = new LetBindStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 127;
				Match(LET);
				State = 128;
				varBind();
				}
				break;
			case 8:
				_localctx = new ExprStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 129;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprResult result;
		public int tableIndex;
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
			this.result = context.result;
			this.tableIndex = context.tableIndex;
		}
	}
	public partial class EvalVarExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EvalVarExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalVarExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalVarExpr(this);
		}
	}
	public partial class AccessExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TeuchiUdonParser.DOT, 0); }
		public AccessExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterAccessExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitAccessExpr(this);
		}
	}
	public partial class EvalUnitFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public EvalUnitFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalUnitFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalUnitFuncExpr(this);
		}
	}
	public partial class EvalTupleFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public EvalTupleFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalTupleFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalTupleFuncExpr(this);
		}
	}
	public partial class ValueBlockExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(TeuchiUdonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(TeuchiUdonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(TeuchiUdonParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(TeuchiUdonParser.SEMICOLON, i);
		}
		public ValueBlockExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterValueBlockExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitValueBlockExpr(this);
		}
	}
	public partial class UnitBlockExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(TeuchiUdonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(TeuchiUdonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(TeuchiUdonParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(TeuchiUdonParser.SEMICOLON, i);
		}
		public UnitBlockExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterUnitBlockExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitUnitBlockExpr(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
	}
	public partial class LetInBindExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(TeuchiUdonParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(TeuchiUdonParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LetInBindExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLetInBindExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLetInBindExpr(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
	}
	public partial class FuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PTR() { return GetToken(TeuchiUdonParser.OP_PTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitFuncExpr(this);
		}
	}
	public partial class EvalSingleFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(TeuchiUdonParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(TeuchiUdonParser.CLOSE_PAREN, 0); }
		public EvalSingleFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalSingleFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalSingleFuncExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				_localctx = new UnitBlockExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 133;
				Match(OPEN_BRACE);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & ((1L << (BREAK - 9)) | (1L << (CONTINUE - 9)) | (1L << (LET - 9)) | (1L << (RETURN - 9)) | (1L << (IDENTIFIER - 9)) | (1L << (INTEGER_LITERAL - 9)) | (1L << (HEX_INTEGER_LITERAL - 9)) | (1L << (BIN_INTEGER_LITERAL - 9)) | (1L << (REAL_LITERAL - 9)) | (1L << (CHARACTER_LITERAL - 9)) | (1L << (REGULAR_STRING - 9)) | (1L << (VERBATIUM_STRING - 9)) | (1L << (OPEN_BRACE - 9)) | (1L << (OPEN_PAREN - 9)))) != 0)) {
					{
					{
					State = 134;
					statement();
					State = 135;
					Match(SEMICOLON);
					}
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 142;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				{
				_localctx = new ValueBlockExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 143;
				Match(OPEN_BRACE);
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 144;
						statement();
						State = 145;
						Match(SEMICOLON);
						}
						} 
					}
					State = 151;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				}
				State = 152;
				expr(0);
				State = 153;
				Match(CLOSE_BRACE);
				}
				break;
			case 3:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 155;
				Match(OPEN_PAREN);
				State = 156;
				expr(0);
				State = 157;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 159;
				literal();
				}
				break;
			case 5:
				{
				_localctx = new EvalVarExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 160;
				identifier();
				}
				break;
			case 6:
				{
				_localctx = new EvalUnitFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 161;
				identifier();
				State = 162;
				Match(OPEN_PAREN);
				State = 163;
				Match(CLOSE_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new EvalSingleFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 165;
				identifier();
				State = 166;
				Match(OPEN_PAREN);
				State = 167;
				expr(0);
				State = 168;
				Match(CLOSE_PAREN);
				}
				break;
			case 8:
				{
				_localctx = new EvalTupleFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 170;
				identifier();
				State = 171;
				Match(OPEN_PAREN);
				State = 172;
				expr(0);
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 173;
					Match(COMMA);
					State = 174;
					expr(0);
					}
					}
					State = 179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 180;
				Match(CLOSE_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new FuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 182;
				varDecl(false);
				State = 183;
				Match(OP_PTR);
				State = 184;
				expr(2);
				}
				break;
			case 10:
				{
				_localctx = new LetInBindExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 186;
				Match(LET);
				State = 187;
				varBind();
				State = 188;
				Match(IN);
				State = 189;
				expr(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 198;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AccessExprContext(new ExprContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 193;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 194;
					Match(DOT);
					State = 195;
					expr(4);
					}
					} 
				}
				State = 200;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralResult result;
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class HexIntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.HEX_INTEGER_LITERAL, 0); }
		public HexIntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterHexIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitHexIntegerLiteral(this);
		}
	}
	public partial class VervatiumStringContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_STRING() { return GetToken(TeuchiUdonParser.VERBATIUM_STRING, 0); }
		public VervatiumStringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVervatiumString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVervatiumString(this);
		}
	}
	public partial class RealLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(TeuchiUdonParser.REAL_LITERAL, 0); }
		public RealLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRealLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRealLiteral(this);
		}
	}
	public partial class RegularStringContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING() { return GetToken(TeuchiUdonParser.REGULAR_STRING, 0); }
		public RegularStringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRegularString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRegularString(this);
		}
	}
	public partial class IntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}
	public partial class BinIntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.BIN_INTEGER_LITERAL, 0); }
		public BinIntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBinIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBinIntegerLiteral(this);
		}
	}
	public partial class CharacterLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(TeuchiUdonParser.CHARACTER_LITERAL, 0); }
		public CharacterLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterCharacterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitCharacterLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 22, RULE_literal);
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new HexIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			case BIN_INTEGER_LITERAL:
				_localctx = new BinIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 203;
				Match(BIN_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				_localctx = new RealLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 204;
				Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new CharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 205;
				Match(CHARACTER_LITERAL);
				}
				break;
			case REGULAR_STRING:
				_localctx = new RegularStringContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 206;
				Match(REGULAR_STRING);
				}
				break;
			case VERBATIUM_STRING:
				_localctx = new VervatiumStringContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 207;
				Match(VERBATIUM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 's', '\xD5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '$', '\n', '\x2', '\x3', 
		'\x3', '\x6', '\x3', '\'', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '(', 
		'\x3', '\x4', '\a', '\x4', ',', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'/', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', '\x35', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x38', '\v', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '=', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', 'H', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', 'X', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '^', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x64', '\n', '\b', '\a', '\b', '\x66', '\n', '\b', 
		'\f', '\b', '\xE', '\b', 'i', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', 'm', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'r', '\n', '\t', '\f', '\t', '\xE', '\t', 'u', '\v', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x85', '\n', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x8C', 
		'\n', '\f', '\f', '\f', '\xE', '\f', '\x8F', '\v', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x96', 
		'\n', '\f', '\f', '\f', '\xE', '\f', '\x99', '\v', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\a', '\f', '\xB2', '\n', '\f', '\f', '\f', '\xE', '\f', '\xB5', '\v', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\xC2', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\xC7', '\n', '\f', '\f', '\f', '\xE', '\f', '\xCA', 
		'\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xD3', '\n', '\r', '\x3', 
		'\r', '\x2', '\x3', '\x16', '\xE', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x2', '\x2', '\x2', '\xF2', 
		'\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x4', '&', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '<', '\x3', '\x2', '\x2', '\x2', '\b', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'I', '\x3', '\x2', '\x2', '\x2', '\f', 'N', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'l', '\x3', '\x2', '\x2', '\x2', '\x10', 'n', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'v', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x16', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xD2', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', 
		'?', '\x2', '\x2', '\x1B', '\x1C', '\x5', '\x4', '\x3', '\x2', '\x1C', 
		'\x1D', '\a', '@', '\x2', '\x2', '\x1D', '\x1E', '\a', 'H', '\x2', '\x2', 
		'\x1E', '\x1F', '\a', '\x2', '\x2', '\x3', '\x1F', '$', '\x3', '\x2', 
		'\x2', '\x2', ' ', '!', '\x5', '\x4', '\x3', '\x2', '!', '\"', '\a', '\x2', 
		'\x2', '\x3', '\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '#', ' ', '\x3', '\x2', '\x2', '\x2', '$', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '%', '\'', '\x5', '\x6', '\x4', '\x2', '&', 
		'%', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', 
		'(', '&', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', 
		')', '\x5', '\x3', '\x2', '\x2', '\x2', '*', ',', '\x5', '\b', '\x5', 
		'\x2', '+', '*', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', '\x2', '\x2', 
		'\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x30', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\x5', '\f', '\a', '\x2', '\x31', '\x32', 
		'\a', 'H', '\x2', '\x2', '\x32', '=', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x35', '\x5', '\n', '\x6', '\x2', '\x34', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x38', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\x5', '\x16', '\f', '\x2', ':', ';', '\a', 'H', '\x2', 
		'\x2', ';', '=', '\x3', '\x2', '\x2', '\x2', '<', '-', '\x3', '\x2', '\x2', 
		'\x2', '<', '\x36', '\x3', '\x2', '\x2', '\x2', '=', '\a', '\x3', '\x2', 
		'\x2', '\x2', '>', '?', '\a', '\x31', '\x2', '\x2', '?', '@', '\a', '\x43', 
		'\x2', '\x2', '@', '\x41', '\x5', '\x12', '\n', '\x2', '\x41', '\x42', 
		'\a', '\x44', '\x2', '\x2', '\x42', 'H', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'H', '\a', '\x32', '\x2', '\x2', '\x44', 'H', '\a', '\x33', '\x2', '\x2', 
		'\x45', 'H', '\a', '\x34', '\x2', '\x2', '\x46', 'H', '\a', '\x35', '\x2', 
		'\x2', 'G', '>', '\x3', '\x2', '\x2', '\x2', 'G', '\x43', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\x31', '\x2', '\x2', 'J', 
		'K', '\a', '\x43', '\x2', '\x2', 'K', 'L', '\x5', '\x12', '\n', '\x2', 
		'L', 'M', '\a', '\x44', '\x2', '\x2', 'M', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\x5', '\xE', '\b', '\x2', 'O', 'P', '\a', 'S', '\x2', 
		'\x2', 'P', 'Q', '\x5', '\x16', '\f', '\x2', 'Q', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\a', '\x43', '\x2', '\x2', 'S', 'm', '\a', '\x44', 
		'\x2', '\x2', 'T', 'W', '\x5', '\x12', '\n', '\x2', 'U', 'V', '\a', 'G', 
		'\x2', '\x2', 'V', 'X', '\x5', '\x10', '\t', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\a', '\x43', '\x2', '\x2', 'Z', ']', '\x5', '\x12', 
		'\n', '\x2', '[', '\\', '\a', 'G', '\x2', '\x2', '\\', '^', '\x5', '\x10', 
		'\t', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', 
		'\x2', '\x2', '^', 'g', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\x46', 
		'\x2', '\x2', '`', '\x63', '\x5', '\x12', '\n', '\x2', '\x61', '\x62', 
		'\a', 'G', '\x2', '\x2', '\x62', '\x64', '\x5', '\x10', '\t', '\x2', '\x63', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x66', '\x3', '\x2', '\x2', '\x2', '\x65', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 
		'j', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\a', '\x44', '\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 
		'l', 'R', '\x3', '\x2', '\x2', '\x2', 'l', 'T', '\x3', '\x2', '\x2', '\x2', 
		'l', 'Y', '\x3', '\x2', '\x2', '\x2', 'm', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'n', 's', '\x5', '\x12', '\n', '\x2', 'o', 'p', '\a', '\x45', '\x2', 
		'\x2', 'p', 'r', '\x5', '\x12', '\n', '\x2', 'q', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\x36', 
		'\x2', '\x2', 'w', '\x13', '\x3', '\x2', '\x2', '\x2', 'x', '\x85', '\a', 
		'&', '\x2', '\x2', 'y', 'z', '\a', '&', '\x2', '\x2', 'z', '\x85', '\x5', 
		'\x16', '\f', '\x2', '{', '\x85', '\a', '\xF', '\x2', '\x2', '|', '}', 
		'\a', '\xF', '\x2', '\x2', '}', '\x85', '\x5', '\x16', '\f', '\x2', '~', 
		'\x85', '\a', '\v', '\x2', '\x2', '\x7F', '\x80', '\a', '\v', '\x2', '\x2', 
		'\x80', '\x85', '\x5', '\x16', '\f', '\x2', '\x81', '\x82', '\a', '\x1A', 
		'\x2', '\x2', '\x82', '\x85', '\x5', '\f', '\a', '\x2', '\x83', '\x85', 
		'\x5', '\x16', '\f', '\x2', '\x84', 'x', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x84', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '|', '\x3', '\x2', '\x2', '\x2', '\x84', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x84', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\b', '\f', '\x1', 
		'\x2', '\x87', '\x8D', '\a', '?', '\x2', '\x2', '\x88', '\x89', '\x5', 
		'\x14', '\v', '\x2', '\x89', '\x8A', '\a', 'H', '\x2', '\x2', '\x8A', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\xC2', '\a', '@', '\x2', '\x2', '\x91', '\x97', '\a', 
		'?', '\x2', '\x2', '\x92', '\x93', '\x5', '\x14', '\v', '\x2', '\x93', 
		'\x94', '\a', 'H', '\x2', '\x2', '\x94', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x92', '\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x5', 
		'\x16', '\f', '\x2', '\x9B', '\x9C', '\a', '@', '\x2', '\x2', '\x9C', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x43', '\x2', 
		'\x2', '\x9E', '\x9F', '\x5', '\x16', '\f', '\x2', '\x9F', '\xA0', '\a', 
		'\x44', '\x2', '\x2', '\xA0', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xC2', '\x5', '\x18', '\r', '\x2', '\xA2', '\xC2', '\x5', '\x12', '\n', 
		'\x2', '\xA3', '\xA4', '\x5', '\x12', '\n', '\x2', '\xA4', '\xA5', '\a', 
		'\x43', '\x2', '\x2', '\xA5', '\xA6', '\a', '\x44', '\x2', '\x2', '\xA6', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x5', '\x12', '\n', 
		'\x2', '\xA8', '\xA9', '\a', '\x43', '\x2', '\x2', '\xA9', '\xAA', '\x5', 
		'\x16', '\f', '\x2', '\xAA', '\xAB', '\a', '\x44', '\x2', '\x2', '\xAB', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x5', '\x12', '\n', 
		'\x2', '\xAD', '\xAE', '\a', '\x43', '\x2', '\x2', '\xAE', '\xB3', '\x5', 
		'\x16', '\f', '\x2', '\xAF', '\xB0', '\a', '\x46', '\x2', '\x2', '\xB0', 
		'\xB2', '\x5', '\x16', '\f', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\a', '\x44', '\x2', '\x2', '\xB7', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\xE', '\b', '\x2', '\xB9', 
		'\xBA', '\a', ']', '\x2', '\x2', '\xBA', '\xBB', '\x5', '\x16', '\f', 
		'\x4', '\xBB', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		'\x1A', '\x2', '\x2', '\xBD', '\xBE', '\x5', '\f', '\a', '\x2', '\xBE', 
		'\xBF', '\a', '\x18', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\x16', '\f', 
		'\x3', '\xC0', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC1', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\x91', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC4', '\f', '\x5', '\x2', '\x2', '\xC4', 
		'\xC5', '\a', '\x45', '\x2', '\x2', '\xC5', '\xC7', '\x5', '\x16', '\f', 
		'\x6', '\xC6', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xD3', '\a', 
		'\x38', '\x2', '\x2', '\xCC', '\xD3', '\a', '\x39', '\x2', '\x2', '\xCD', 
		'\xD3', '\a', ':', '\x2', '\x2', '\xCE', '\xD3', '\a', ';', '\x2', '\x2', 
		'\xCF', '\xD3', '\a', '<', '\x2', '\x2', '\xD0', '\xD3', '\a', '=', '\x2', 
		'\x2', '\xD1', '\xD3', '\a', '>', '\x2', '\x2', '\xD2', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x15', '#', '(', '-', '\x36', '<', 
		'G', 'W', ']', '\x63', 'g', 'l', 's', '\x84', '\x8D', '\x97', '\xB3', 
		'\xC1', '\xC8', '\xD2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace akanevrc.TeuchiUdon.Editor.Compiler
