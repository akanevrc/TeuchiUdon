//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\TeuchiUdonParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace akanevrc.TeuchiUdon.Editor.Compiler {

    #pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class TeuchiUdonParser : TeuchiUdonBaseParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_COMMENT=2, OPEN_DELIMITED_COMMENT=3, NEWLINE=4, 
		WS=5, TAB=6, V_END=7, V_OPEN=8, V_CLOSE=9, BASE=10, CATCH=11, CHECKED=12, 
		DYNAMIC=13, FINALLY=14, INTERNAL=15, IS=16, NAMEOF=17, NAMESPACE=18, NEW=19, 
		OUT=20, PRIVATE=21, PROTECTED=22, PUBLIC=23, REF=24, SIZEOF=25, THIS=26, 
		THROW=27, TRY=28, TYPEOF=29, UNCHECKED=30, YIELD=31, AS=32, CASE=33, DATA=34, 
		ELSE=35, HIDING=36, IF=37, IMPORT=38, IN=39, LET=40, MODULE=41, NEWTYPE=42, 
		OF=43, THEN=44, TYPE=45, WHERE=46, WILDCARD=47, IDENTIFIER=48, LITERAL_ACCESS=49, 
		INTEGER_LITERAL=50, HEX_INTEGER_LITERAL=51, BIN_INTEGER_LITERAL=52, REAL_LITERAL=53, 
		CHARACTER_LITERAL=54, REGULAR_STRING=55, VERBATIUM_STRING=56, OPEN_BRACE=57, 
		CLOSE_BRACE=58, OPEN_BRACKET=59, CLOSE_BRACKET=60, OPEN_PARENS=61, CLOSE_PARENS=62, 
		DOT=63, COMMA=64, COLON=65, SEMICOLON=66, PLUS=67, MINUS=68, STAR=69, 
		DIV=70, PERCENT=71, AMP=72, BITWISE_OR=73, CARET=74, BANG=75, TILDE=76, 
		ASSIGNMENT=77, LT=78, GT=79, INTERR=80, OP_COALESCING=81, OP_INC=82, OP_DEC=83, 
		OP_AND=84, OP_OR=85, OP_PTR=86, OP_EQ=87, OP_NE=88, OP_LE=89, OP_GE=90, 
		OP_ADD_ASSIGNMENT=91, OP_SUB_ASSIGNMENT=92, OP_MULT_ASSIGNMENT=93, OP_DIV_ASSIGNMENT=94, 
		OP_MOD_ASSIGNMENT=95, OP_AND_ASSIGNMENT=96, OP_OR_ASSIGNMENT=97, OP_XOR_ASSIGNMENT=98, 
		OP_LEFT_SHIFT=99, OP_RIGHT_SHIFT=100, OP_LEFT_SHIFT_ASSIGNMENT=101, OP_RIGHT_SHIFT_ASSIGNMENT=102, 
		OP_COALESCING_ASSIGNMENT=103, OP_RANGE=104, OP_LEFT_PIPELINE=105, OP_RIGHT_PIPELINE=106, 
		OPEN_DELIMITED_COMMENT_INSIDE=107, CLOSE_DELIMITED_COMMENT_INSIDE=108;
	public const int
		RULE_target = 0, RULE_body = 1, RULE_topStatement = 2, RULE_varBind = 3, 
		RULE_varDecl = 4, RULE_qualified = 5, RULE_identifier = 6, RULE_expr = 7, 
		RULE_literal = 8, RULE_open = 9, RULE_close = 10, RULE_end = 11, RULE_newline = 12;
	public static readonly string[] ruleNames = {
		"target", "body", "topStatement", "varBind", "varDecl", "qualified", "identifier", 
		"expr", "literal", "open", "close", "end", "newline"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, null, null, "'#;'", "'#{'", 
		"'#}'", "'base'", "'catch'", "'checked'", "'dynamic'", "'finally'", "'internal'", 
		"'is'", "'nameof'", "'namespace'", "'new'", "'out'", "'private'", "'protected'", 
		"'public'", "'ref'", "'sizeof'", "'this'", "'throw'", "'try'", "'typeof'", 
		"'unchecked'", "'yield'", "'as'", "'case'", "'data'", "'else'", "'hiding'", 
		"'if'", "'import'", "'in'", "'let'", "'module'", "'newtype'", "'of'", 
		"'then'", "'type'", "'where'", "'_'", null, null, null, null, null, null, 
		null, null, null, "'{'", "'}'", "'['", "']'", "'('", "')'", "'.'", "','", 
		"':'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", 
		"'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'??'", "'++'", "'--'", "'&&'", 
		"'||'", "'->'", "'=='", "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'|='", "'^='", "'<<'", "'>>'", "'<<='", "'>>='", 
		"'??='", "'..'", "'<|'", "'|>'", "'{/'", "'/}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_COMMENT", "OPEN_DELIMITED_COMMENT", 
		"NEWLINE", "WS", "TAB", "V_END", "V_OPEN", "V_CLOSE", "BASE", "CATCH", 
		"CHECKED", "DYNAMIC", "FINALLY", "INTERNAL", "IS", "NAMEOF", "NAMESPACE", 
		"NEW", "OUT", "PRIVATE", "PROTECTED", "PUBLIC", "REF", "SIZEOF", "THIS", 
		"THROW", "TRY", "TYPEOF", "UNCHECKED", "YIELD", "AS", "CASE", "DATA", 
		"ELSE", "HIDING", "IF", "IMPORT", "IN", "LET", "MODULE", "NEWTYPE", "OF", 
		"THEN", "TYPE", "WHERE", "WILDCARD", "IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", 
		"HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", 
		"REGULAR_STRING", "VERBATIUM_STRING", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", "COLON", 
		"SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", 
		"CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", "OP_COALESCING", 
		"OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", 
		"OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", 
		"OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", 
		"OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", "OP_RIGHT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", 
		"OP_RIGHT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", "OP_RANGE", "OP_LEFT_PIPELINE", 
		"OP_RIGHT_PIPELINE", "OPEN_DELIMITED_COMMENT_INSIDE", "CLOSE_DELIMITED_COMMENT_INSIDE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeuchiUdonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TeuchiUdonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TeuchiUdonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TeuchiUdonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TeuchiUdonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndContext[] end() {
			return GetRuleContexts<EndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end(int i) {
			return GetRuleContext<EndContext>(i);
		}
		public TargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitTarget(this);
		}
	}

	[RuleVersion(0)]
	public TargetContext target() {
		TargetContext _localctx = new TargetContext(Context, State);
		EnterRule(_localctx, 0, RULE_target);
		int _la;
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case V_OPEN:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26;
				open();
				State = 27;
				body();
				State = 28;
				close();
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==V_END || _la==SEMICOLON) {
					{
					{
					State = 29;
					end();
					}
					}
					State = 34;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 35;
				Match(Eof);
				}
				break;
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37;
				body();
				State = 38;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BodyResult result;
		[System.Diagnostics.DebuggerNonUserCode] public TopStatementContext[] topStatement() {
			return GetRuleContexts<TopStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopStatementContext topStatement(int i) {
			return GetRuleContext<TopStatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 42;
				topStatement();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << BIN_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << VERBATIUM_STRING) | (1L << OPEN_PARENS))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopStatementContext : ParserRuleContext {
		public TopStatementResult result;
		public TopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topStatement; } }
	 
		public TopStatementContext() { }
		public virtual void CopyFrom(TopStatementContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class VarBindTopStatementContext : TopStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarBindContext varBind() {
			return GetRuleContext<VarBindContext>(0);
		}
		public VarBindTopStatementContext(TopStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVarBindTopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVarBindTopStatement(this);
		}
	}
	public partial class ExprTopStatementContext : TopStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprTopStatementContext(TopStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterExprTopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitExprTopStatement(this);
		}
	}

	[RuleVersion(0)]
	public TopStatementContext topStatement() {
		TopStatementContext _localctx = new TopStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_topStatement);
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new VarBindTopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 47;
				varBind();
				}
				break;
			case 2:
				_localctx = new ExprTopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarBindContext : ParserRuleContext {
		public VarBindResult result;
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(TeuchiUdonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext[] end() {
			return GetRuleContexts<EndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end(int i) {
			return GetRuleContext<EndContext>(i);
		}
		public VarBindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varBind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVarBind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVarBind(this);
		}
	}

	[RuleVersion(0)]
	public VarBindContext varBind() {
		VarBindContext _localctx = new VarBindContext(Context, State);
		EnterRule(_localctx, 6, RULE_varBind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			varDecl(true);
			State = 52;
			Match(ASSIGNMENT);
			State = 53;
			expr(0);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 54;
				end();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==V_END || _la==SEMICOLON );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public bool isActual;
		public VarDeclResult result;
		public VarDeclContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public VarDeclContext(ParserRuleContext parent, int invokingState, bool isActual)
			: base(parent, invokingState)
		{
			this.isActual = isActual;
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
			this.isActual = context.isActual;
			this.result = context.result;
		}
	}
	public partial class UnitVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(TeuchiUdonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(TeuchiUdonParser.CLOSE_PARENS, 0); }
		public UnitVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterUnitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitUnitVarDecl(this);
		}
	}
	public partial class TupleVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(TeuchiUdonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(TeuchiUdonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(TeuchiUdonParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(TeuchiUdonParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedContext[] qualified() {
			return GetRuleContexts<QualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedContext qualified(int i) {
			return GetRuleContext<QualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public TupleVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterTupleVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitTupleVarDecl(this);
		}
	}
	public partial class SingleVarDeclContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TeuchiUdonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedContext qualified() {
			return GetRuleContext<QualifiedContext>(0);
		}
		public SingleVarDeclContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterSingleVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitSingleVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl(bool isActual) {
		VarDeclContext _localctx = new VarDeclContext(Context, State, isActual);
		EnterRule(_localctx, 8, RULE_varDecl);
		int _la;
		try {
			int _alt;
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new UnitVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				Match(OPEN_PARENS);
				State = 60;
				Match(CLOSE_PARENS);
				}
				break;
			case 2:
				_localctx = new SingleVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				identifier();
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 62;
					Match(COLON);
					State = 63;
					qualified();
					}
				}

				}
				break;
			case 3:
				_localctx = new TupleVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 66;
				Match(OPEN_PARENS);
				State = 67;
				identifier();
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 68;
					Match(COLON);
					State = 69;
					qualified();
					}
				}

				State = 80;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 72;
						Match(COMMA);
						State = 73;
						identifier();
						State = 76;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COLON) {
							{
							State = 74;
							Match(COLON);
							State = 75;
							qualified();
							}
						}

						}
						} 
					}
					State = 82;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 83;
					Match(COMMA);
					}
				}

				State = 86;
				Match(CLOSE_PARENS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedContext : ParserRuleContext {
		public QualifiedResult result;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TeuchiUdonParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TeuchiUdonParser.DOT, i);
		}
		public QualifiedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterQualified(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitQualified(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedContext qualified() {
		QualifiedContext _localctx = new QualifiedContext(Context, State);
		EnterRule(_localctx, 10, RULE_qualified);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			identifier();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 91;
				Match(DOT);
				State = 92;
				identifier();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierResult result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TeuchiUdonParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprResult result;
		public int tableIndex;
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
			this.result = context.result;
			this.tableIndex = context.tableIndex;
		}
	}
	public partial class EvalVarExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EvalVarExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalVarExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalVarExpr(this);
		}
	}
	public partial class AccessExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TeuchiUdonParser.DOT, 0); }
		public AccessExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterAccessExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitAccessExpr(this);
		}
	}
	public partial class EvalUnitFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(TeuchiUdonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(TeuchiUdonParser.CLOSE_PARENS, 0); }
		public EvalUnitFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalUnitFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalUnitFuncExpr(this);
		}
	}
	public partial class EvalTupleFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(TeuchiUdonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(TeuchiUdonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TeuchiUdonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TeuchiUdonParser.COMMA, i);
		}
		public EvalTupleFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalTupleFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalTupleFuncExpr(this);
		}
	}
	public partial class ParensExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(TeuchiUdonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(TeuchiUdonParser.CLOSE_PARENS, 0); }
		public ParensExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterParensExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitParensExpr(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
	}
	public partial class FuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PTR() { return GetToken(TeuchiUdonParser.OP_PTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitFuncExpr(this);
		}
	}
	public partial class EvalSingleFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(TeuchiUdonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(TeuchiUdonParser.CLOSE_PARENS, 0); }
		public EvalSingleFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEvalSingleFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEvalSingleFuncExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				_localctx = new ParensExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 101;
				Match(OPEN_PARENS);
				State = 102;
				expr(0);
				State = 103;
				Match(CLOSE_PARENS);
				}
				break;
			case 2:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 105;
				literal();
				}
				break;
			case 3:
				{
				_localctx = new EvalVarExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 106;
				identifier();
				}
				break;
			case 4:
				{
				_localctx = new EvalUnitFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 107;
				identifier();
				State = 108;
				Match(OPEN_PARENS);
				State = 109;
				Match(CLOSE_PARENS);
				}
				break;
			case 5:
				{
				_localctx = new EvalSingleFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 111;
				identifier();
				State = 112;
				Match(OPEN_PARENS);
				State = 113;
				expr(0);
				State = 114;
				Match(CLOSE_PARENS);
				}
				break;
			case 6:
				{
				_localctx = new EvalTupleFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 116;
				identifier();
				State = 117;
				Match(OPEN_PARENS);
				State = 118;
				expr(0);
				State = 123;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 119;
						Match(COMMA);
						State = 120;
						expr(0);
						}
						} 
					}
					State = 125;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 126;
					Match(COMMA);
					}
				}

				State = 129;
				Match(CLOSE_PARENS);
				}
				break;
			case 7:
				{
				_localctx = new FuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131;
				varDecl(false);
				State = 132;
				Match(OP_PTR);
				State = 133;
				expr(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 142;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AccessExprContext(new ExprContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 137;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 138;
					Match(DOT);
					State = 139;
					expr(3);
					}
					} 
				}
				State = 144;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralResult result;
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
			this.result = context.result;
		}
	}
	public partial class HexIntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.HEX_INTEGER_LITERAL, 0); }
		public HexIntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterHexIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitHexIntegerLiteral(this);
		}
	}
	public partial class VervatiumStringContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_STRING() { return GetToken(TeuchiUdonParser.VERBATIUM_STRING, 0); }
		public VervatiumStringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterVervatiumString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitVervatiumString(this);
		}
	}
	public partial class RealLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(TeuchiUdonParser.REAL_LITERAL, 0); }
		public RealLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRealLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRealLiteral(this);
		}
	}
	public partial class RegularStringContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING() { return GetToken(TeuchiUdonParser.REGULAR_STRING, 0); }
		public RegularStringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterRegularString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitRegularString(this);
		}
	}
	public partial class IntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}
	public partial class BinIntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_INTEGER_LITERAL() { return GetToken(TeuchiUdonParser.BIN_INTEGER_LITERAL, 0); }
		public BinIntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterBinIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitBinIntegerLiteral(this);
		}
	}
	public partial class CharacterLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(TeuchiUdonParser.CHARACTER_LITERAL, 0); }
		public CharacterLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterCharacterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitCharacterLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 16, RULE_literal);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 145;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new HexIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 146;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			case BIN_INTEGER_LITERAL:
				_localctx = new BinIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 147;
				Match(BIN_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				_localctx = new RealLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 148;
				Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new CharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 149;
				Match(CHARACTER_LITERAL);
				}
				break;
			case REGULAR_STRING:
				_localctx = new RegularStringContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 150;
				Match(REGULAR_STRING);
				}
				break;
			case VERBATIUM_STRING:
				_localctx = new VervatiumStringContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 151;
				Match(VERBATIUM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(TeuchiUdonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode V_OPEN() { return GetToken(TeuchiUdonParser.V_OPEN, 0); }
		public OpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitOpen(this);
		}
	}

	[RuleVersion(0)]
	public OpenContext open() {
		OpenContext _localctx = new OpenContext(Context, State);
		EnterRule(_localctx, 18, RULE_open);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_la = TokenStream.LA(1);
			if ( !(_la==V_OPEN || _la==OPEN_BRACE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(TeuchiUdonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode V_CLOSE() { return GetToken(TeuchiUdonParser.V_CLOSE, 0); }
		public CloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitClose(this);
		}
	}

	[RuleVersion(0)]
	public CloseContext close() {
		CloseContext _localctx = new CloseContext(Context, State);
		EnterRule(_localctx, 20, RULE_close);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			_la = TokenStream.LA(1);
			if ( !(_la==V_CLOSE || _la==CLOSE_BRACE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TeuchiUdonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode V_END() { return GetToken(TeuchiUdonParser.V_END, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitEnd(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 22, RULE_end);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_la = TokenStream.LA(1);
			if ( !(_la==V_END || _la==SEMICOLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(TeuchiUdonParser.NEWLINE, 0); }
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.EnterNewline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeuchiUdonParserListener typedListener = listener as ITeuchiUdonParserListener;
			if (typedListener != null) typedListener.ExitNewline(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 24, RULE_newline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'n', '\xA5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'!', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '$', '\v', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '+', '\n', '\x2', '\x3', '\x3', '\x6', '\x3', '.', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', '/', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x34', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x6', '\x5', ':', '\n', '\x5', '\r', '\x5', '\xE', '\x5', ';', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x43', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'I', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'O', '\n', '\x6', '\a', 
		'\x6', 'Q', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'T', '\v', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'W', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '[', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '`', '\n', '\a', '\f', '\a', '\xE', '\a', '\x63', '\v', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\a', '\t', '|', '\n', '\t', '\f', '\t', '\xE', '\t', '\x7F', 
		'\v', '\t', '\x3', '\t', '\x5', '\t', '\x82', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x8A', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', '\x8F', '\n', '\t', '\f', '\t', '\xE', '\t', '\x92', '\v', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x9B', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x2', '\x3', '\x10', '\xF', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x2', '\x5', '\x4', '\x2', '\n', '\n', ';', ';', '\x4', '\x2', 
		'\v', '\v', '<', '<', '\x4', '\x2', '\t', '\t', '\x44', '\x44', '\x2', 
		'\xB3', '\x2', '*', '\x3', '\x2', '\x2', '\x2', '\x4', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x33', '\x3', '\x2', '\x2', '\x2', '\b', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'Z', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\xE', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x89', '\x3', '\x2', '\x2', '\x2', '\x12', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x18', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x5', 
		'\x14', '\v', '\x2', '\x1D', '\x1E', '\x5', '\x4', '\x3', '\x2', '\x1E', 
		'\"', '\x5', '\x16', '\f', '\x2', '\x1F', '!', '\x5', '\x18', '\r', '\x2', 
		' ', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '$', '\x3', '\x2', '\x2', 
		'\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', 
		'\x2', '\x2', '#', '%', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', 
		'\x2', '\x2', '\x2', '%', '&', '\a', '\x2', '\x2', '\x3', '&', '+', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\x5', '\x4', '\x3', '\x2', '(', ')', 
		'\a', '\x2', '\x2', '\x3', ')', '+', '\x3', '\x2', '\x2', '\x2', '*', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '*', '\'', '\x3', '\x2', '\x2', '\x2', 
		'+', '\x3', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x5', '\x6', '\x4', 
		'\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', 
		'\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x5', '\x3', '\x2', '\x2', '\x2', '\x31', '\x34', 
		'\x5', '\b', '\x5', '\x2', '\x32', '\x34', '\x5', '\x10', '\t', '\x2', 
		'\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\a', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\x5', '\n', '\x6', '\x2', '\x36', '\x37', '\a', 'O', '\x2', '\x2', '\x37', 
		'\x39', '\x5', '\x10', '\t', '\x2', '\x38', ':', '\x5', '\x18', '\r', 
		'\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', 
		'\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', 
		'\x2', '\x2', '\x2', '<', '\t', '\x3', '\x2', '\x2', '\x2', '=', '>', 
		'\a', '?', '\x2', '\x2', '>', '[', '\a', '@', '\x2', '\x2', '?', '\x42', 
		'\x5', '\xE', '\b', '\x2', '@', '\x41', '\a', '\x43', '\x2', '\x2', '\x41', 
		'\x43', '\x5', '\f', '\a', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x45', '\a', '?', '\x2', '\x2', '\x45', 'H', '\x5', 
		'\xE', '\b', '\x2', '\x46', 'G', '\a', '\x43', '\x2', '\x2', 'G', 'I', 
		'\x5', '\f', '\a', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\x3', '\x2', '\x2', '\x2', 'I', 'R', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\a', '\x42', '\x2', '\x2', 'K', 'N', '\x5', '\xE', '\b', '\x2', 
		'L', 'M', '\a', '\x43', '\x2', '\x2', 'M', 'O', '\x5', '\f', '\a', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', 'J', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'T', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 
		'T', 'R', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\a', '\x42', '\x2', '\x2', 
		'V', 'U', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '@', '\x2', '\x2', 
		'Y', '[', '\x3', '\x2', '\x2', '\x2', 'Z', '=', '\x3', '\x2', '\x2', '\x2', 
		'Z', '?', '\x3', '\x2', '\x2', '\x2', 'Z', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '[', '\v', '\x3', '\x2', '\x2', '\x2', '\\', '\x61', '\x5', '\xE', 
		'\b', '\x2', ']', '^', '\a', '\x41', '\x2', '\x2', '^', '`', '\x5', '\xE', 
		'\b', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\x32', '\x2', '\x2', '\x65', '\xF', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\b', '\t', '\x1', '\x2', 'g', 'h', '\a', '?', '\x2', '\x2', 'h', 
		'i', '\x5', '\x10', '\t', '\x2', 'i', 'j', '\a', '@', '\x2', '\x2', 'j', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', 'k', '\x8A', '\x5', '\x12', '\n', 
		'\x2', 'l', '\x8A', '\x5', '\xE', '\b', '\x2', 'm', 'n', '\x5', '\xE', 
		'\b', '\x2', 'n', 'o', '\a', '?', '\x2', '\x2', 'o', 'p', '\a', '@', '\x2', 
		'\x2', 'p', '\x8A', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x5', '\xE', 
		'\b', '\x2', 'r', 's', '\a', '?', '\x2', '\x2', 's', 't', '\x5', '\x10', 
		'\t', '\x2', 't', 'u', '\a', '@', '\x2', '\x2', 'u', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\x5', '\xE', '\b', '\x2', 'w', 'x', '\a', '?', 
		'\x2', '\x2', 'x', '}', '\x5', '\x10', '\t', '\x2', 'y', 'z', '\a', '\x42', 
		'\x2', '\x2', 'z', '|', '\x5', '\x10', '\t', '\x2', '{', 'y', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x7F', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', 
		'\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x82', '\a', '\x42', '\x2', '\x2', '\x81', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\a', '@', '\x2', '\x2', '\x84', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x5', '\n', '\x6', 
		'\x2', '\x86', '\x87', '\a', 'X', '\x2', '\x2', '\x87', '\x88', '\x5', 
		'\x10', '\t', '\x3', '\x88', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x89', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x89', 'l', '\x3', '\x2', '\x2', '\x2', '\x89', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x89', 'q', '\x3', '\x2', '\x2', '\x2', '\x89', 'v', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x85', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\f', '\x4', '\x2', 
		'\x2', '\x8C', '\x8D', '\a', '\x41', '\x2', '\x2', '\x8D', '\x8F', '\x5', 
		'\x10', '\t', '\x5', '\x8E', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x9B', '\a', '\x34', '\x2', '\x2', '\x94', '\x9B', '\a', '\x35', '\x2', 
		'\x2', '\x95', '\x9B', '\a', '\x36', '\x2', '\x2', '\x96', '\x9B', '\a', 
		'\x37', '\x2', '\x2', '\x97', '\x9B', '\a', '\x38', '\x2', '\x2', '\x98', 
		'\x9B', '\a', '\x39', '\x2', '\x2', '\x99', '\x9B', '\a', ':', '\x2', 
		'\x2', '\x9A', '\x93', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x95', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x13', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\t', '\x2', '\x2', '\x2', '\x9D', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\t', '\x3', '\x2', '\x2', '\x9F', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\t', '\x4', '\x2', '\x2', '\xA1', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '\x6', '\x2', 
		'\x2', '\xA3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x13', '\"', '*', 
		'/', '\x33', ';', '\x42', 'H', 'N', 'R', 'V', 'Z', '\x61', '}', '\x81', 
		'\x89', '\x90', '\x9A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace akanevrc.TeuchiUdon.Editor.Compiler
